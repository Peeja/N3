# Notation3 Reasoner tests
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:   <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix rdft: <http://www.w3.org/ns/rdftest#> .
@prefix test: <https://w3c.github.io/N3/tests/test.n3#>.
@prefix :     <#>.

<>  a mf:Manifest ;
    mf:name "Notation3 Reasoner tests" ;
    mf:entries
    (
      # From swap/test/crypto

      # From swap/test/cwm

      # From swap/test/delta

      # From swap/test/i18n

      # From swap/test/includes
      :listin :bnode :concat :conclusion-simple :conjunction

      # From swap/test/math

      # From swap/test/norm
      :norm10

      # From swap/test/list
      :t1018b1 :t1018b2 :t1031 :t2004u2 :t2004u3 :t2004u4 :t2004u5 :t2005 :t2006 :t2007

      # From swap/test/paw

      # From swap/test/ql

      # From swap/test/reason
      :t01proof :t02proof :t03proof :t04proof :t05proof :t06proof :socrates :t08proof
      :t09proof :t12

      # From swap/test/string
      :t103 :t104 :t105

      # From swap/test/supports
      :t01

      # From swap/test/unify
      :t553 :t554 :t555

    ) .

# List tests from swap/tests/includes

:listin a test:TestN3Reason;
  mf:name      "list membership" ;
  rdfs:comment "Builtins for list membership, binding multiple values." ;
  mf:action <cwm_includes/list-in.n3>;
  mf:result <cwm_includes/list-in-ref.n3>;
  test:options [test:think true; test:data true;] .

:bnode a test:TestN3Reason;
  mf:name      "list membership" ;
  rdfs:comment "Builtins for list membership, binding multiple values." ;
  mf:action <cwm_includes/bnodeConclude.n3>;
  mf:result <cwm_includes/bnode-conclude-ref.n3>;
  test:options [test:think true; test:data true;] .

:concat a test:TestN3Reason;
  mf:name      "list concatenation" ;
  rdfs:comment "Builtins for list concatenation." ;
  mf:action <cwm_includes/concat.n3>;
  mf:result <cwm_includes/concat-ref.n3>;
  test:options [test:think true; test:data true;] .

:conclusion-simple a test:TestN3Reason;
  mf:name      "includes-conclusion-simple.n3" ;
  rdfs:comment "Builtins for log:conclusion." ;
  mf:action <cwm_includes/conclusion-simple.n3>;
  mf:result <cwm_includes/conclusion-simple-ref.n3>;
  test:options [test:think true; test:data true;] .

:conjunction a test:TestN3Reason;
  mf:name      "includes-conjunction.n3" ;
  rdfs:comment "Builtins for log:conjunction." ;
  mf:action <cwm_includes/conjunction.n3>;
  mf:result <cwm_includes/conjunction-ref.n3>;
  test:options [test:think true; test:data true;] .

# Tests from swap/test/norm
:norm10 a test:TestN3Reason;
  mf:name "norm-av1.n3";
  rdfs:comment   "Bug with RDF output in bySubject mode";
  mf:action <cwm_norm/av.n3>;
  mf:result <cwm_norm/av-ref.n3>;
  test:options [test:think true; test:data true;] .

# List tests from swap/test/list

:t1018b1 a test:TestN3Reason;
  mf:name      "list-bug1.n3" ;
  rdfs:comment "List processing bug check 1" ;
  mf:action <cwm_list/list-bug1.n3>;
  mf:result <cwm_list/list-bug1-ref.n3>;
  test:options [test:think true; test:data true;] .

:t1018b2 a test:TestN3Reason;
  mf:name      "list-bug2.n3" ;
  rdfs:comment "List processing bug check 2" ;
  mf:action <cwm_list/list-bug2.n3>;
  mf:result <cwm_list/list-bug2-ref.n3>;
  test:options [test:think true; test:data true;] .

:t1031 a test:TestN3Reason;
  mf:name      "li-r1.n3" ;
  rdfs:comment "Inference using lists" ;
  mf:action <cwm_list/r1.n3>;
  mf:result <cwm_list/r1-ref.n3>;
  test:options [test:think true; test:data true;] .

:t2004u2 a test:TestN3Reason;
  mf:name      "list-unify2.n3" ;
  rdfs:comment "List unification 2 - variable in list" ;
  mf:action <cwm_list/unify2.n3>;
  mf:result <cwm_list/unify2-ref.n3>;
  test:options [test:think true; test:data true] .

:t2004u3 a test:TestN3Reason;
  mf:name      "list-unify3.n3" ;
  rdfs:comment "List unification 3 - nested lists" ;
  mf:action <cwm_list/unify3.n3>;
  mf:result <cwm_list/unify3-ref.n3>;
  test:options [test:think true; test:data true] .

:t2004u4 a test:TestN3Reason;
  mf:name      "list-unify4.n3" ;
  rdfs:comment "List unification 4 - nested lists" ;
  mf:action <cwm_list/unify4.n3>;
  mf:result <cwm_list/unify4-ref.n3>;
  test:options [test:think true; test:data true] .

:t2004u5 a test:TestN3Reason;
  mf:name      "list-unify5.n3" ;
  rdfs:comment "List unification 5 - multiple values" ;
  mf:action <cwm_list/unify5.n3>;
  mf:result <cwm_list/unify5-ref.n3>;
  test:options [test:think true; test:data true] .

:t2005 a test:TestN3Reason;
  mf:name      "append-out.n3" ;
  rdfs:comment "Iterative ops on lists" ;
  mf:action <cwm_list/append.n3>;
  mf:result <cwm_list/append-ref.n3>;
  test:options [test:think true; test:data true] .

:t2006 a test:TestN3Reason;
  mf:name      "list-last.n3" ;
  rdfs:comment "last, in builtins on lists" ;
  mf:action <cwm_list/last.n3>;
  mf:result <cwm_list/last-ref.n3>;
  test:options [test:think true; test:data true] .

:t2007 a test:TestN3Reason;
  mf:name      "list-builtin_generated_match.n3" ;
  rdfs:comment "last, in builtins on lists" ;
  mf:action <cwm_list/builtin_generated_match.n3>;
  mf:result <cwm_list/builtin_generated_match-ref.n3>;
  test:options [test:think true; test:data true] .

# List tests from swap/test/reason

:t01proof a test:TestN3Reason;
  mf:name      "reason-t1.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t1.n3>;
  mf:result <cwm_reason/t1-ref.n3>;
  test:options [test:think true; test:data true] .

:t02proof a test:TestN3Reason;
  mf:name      "reason-t2.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t2.n3>;
  mf:result <cwm_reason/t2-ref.n3>;
  test:options [test:think true; test:data true] .

:t03proof a test:TestN3Reason;
  mf:name      "reason-t3.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t3.n3>;
  mf:result <cwm_reason/t3-ref.n3>;
  test:options [test:think true; test:data true] .

:t04proof a test:TestN3Reason;
  mf:name      "reason-t4.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t4.n3>;
  mf:result <cwm_reason/t4-ref.n3>;
  test:options [test:think true; test:data true] .

:t05proof a test:TestN3Reason;
  mf:name      "reason-t5.n3" ;
  rdfs:comment "Proof for a little inference" ;
  mf:action <cwm_reason/t5.n3>;
  mf:result <cwm_reason/t5-ref.n3>;
  test:options [test:think true; test:data true] .

:t06proof a test:TestN3Reason;
  mf:name      "reason-t6.n3" ;
  rdfs:comment "Proof for a little inference" ;
  mf:action <cwm_reason/t6.n3>;
  mf:result <cwm_reason/t6-ref.n3>;
  test:options [test:think true; test:data true] .

# This is equiv of others but easier to explain with famous example
:socrates a test:TestN3Reason;
  mf:name      "reason-socrates.n3" ;
  rdfs:comment "Proof for a little inference" ;
  mf:action <cwm_reason/socrates.n3>;
  mf:result <cwm_reason/socrates-ref.n3>;
  test:options [test:think true; test:data true] .

:t08proof a test:TestN3Reason;
  mf:name      "reason-t8.n3" ;
  rdfs:comment "Proof for a little inference, --n3=B to name BNodes" ;
  mf:action <cwm_reason/t8.n3>;
  mf:result <cwm_reason/t8-ref.n3>;
  test:options [test:think true; test:data true] .

:t09proof a test:TestN3Reason;
  mf:name      "reason-t9.n3" ;
  rdfs:comment "Proof for a little inference - binding Bnode to symbol" ;
  mf:action <cwm_reason/t9.n3>;
  mf:result <cwm_reason/t9-ref.n3>;
  test:options [test:think true; test:data true] .

:t12  a test:TestN3Reason; # too unstable!
  mf:name      "reason-double.n3" ;
  rdfs:comment "Proof for a little inference - binding Bnode to symbol" ;
  mf:action <cwm_reason/double.n3>;
  mf:result <cwm_reason/double-ref.n3>;
  test:options [test:think true; test:data true] .

# List tests from swap/test/string

:t103 a test:TestN3Reason;
  mf:name      "string-endsWith.n3" ;
  rdfs:comment "string:endsWith" ;
  mf:action <cwm_string/endsWith.n3>;
  mf:result <cwm_string/endsWith-out.n3>;
  test:options [test:rules true; test:data true] .

:t104 a test:TestN3Reason;
  mf:name      "string-roughly.n3" ;
  rdfs:comment "string:containsRoughly ignores case smart whitespace" ;
  mf:action <cwm_string/roughly.n3>;
  mf:result <cwm_string/roughly-out.n3>;
  test:options [test:rules true; test:data true] .

:t108 a test:TestN3Reason;
  mf:name      "string-uriEncode.n3" ;
  rdfs:comment "string:encodeForURI and encodeForFragID" ;
  mf:action <cwm_string/uriEncode.n3>;
  mf:result <cwm_string/uriEncode-out.n3>;
  test:options [test:rules true; test:data true] .

# List tests from swap/test/supports
:t01 a test:TestN3Reason;
  mf:name      "supports-simple.n3" ;
  rdfs:comment "A very simple use of log:supports" ;
  mf:action <cwm_supports/simple.n3>;
  mf:result <cwm_supports/simple-ref.n3>;
  test:options [test:rules true; test:data true] .

# List tests from swap/test/unify
:t553 a test:TestN3Reason;
  mf:name      "unify-unify1.n3" ;
  rdfs:comment "log:includes looking for @forAll" ;
  mf:action <cwm_unify/unify1.n3>;
  mf:result <cwm_unify/unify1-ref.n3>;
  test:options [test:rules true; test:data true] .

:t554 a test:TestN3Reason;
  mf:name      "unify-unify2.n3" ;
  rdfs:comment "Query looking for @forAll" ;
  mf:action <cwm_unify/unify2.n3>;
  mf:result <cwm_unify/unify2-ref.n3>;
  test:options [test:rules true; test:data true] .

:t555 a test:TestN3Reason;
  mf:name      "unify-reflexive.n3" ;
  rdfs:comment "Include using the same var twice" ;
  mf:action <cwm_unify/reflexive.n3>;
  mf:result <cwm_unify/reflexive-ref.n3>;
  test:options [test:rules true; test:data true] .

