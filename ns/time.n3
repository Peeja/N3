#   n3 definition of some time and date functions
#
#  Based on orginal cwm_date and cwm_time by Mark Nottingham
# http://www.mnot.com/python
# These use isodate.py and timegm.py, by mnot.
# Released with permission under W3C code licence.
#
# Schema (c) TimBL, #C code licence.
# 
# $Id: time.n3,v 1.7 2006-12-13 21:10:29 timbl Exp $

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix doc: <http://www.w3.org/2000/10/swap/pim/doc#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .

@prefix time: <http://www.w3.org/2000/10/swap/time#>.
@prefix : <#>.

<> <http://www.w3.org/2000/10/swap/pim/doc.n3#licence> <http://www.w3.org/Consortium/Legal/copyright-software-19980720>.


time:inSeconds a rdf:Property, owl:FunctionalProperty, owl:InverseFunctionalProperty;
    rdfs:label "in era seconds";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer number of seconds
since the beginning of the era on a given system.  Don't assume a particular value, always test for it.
The object can be calculated as a function of the subject.

Cwm implements this as a bidirectional function: you can calculate the
ISO date from the seconds since the beginning of the era, or vice-versa.
""";
    rdfs:isDefinedBy <>.

#   Pulling out bits of the date time string:


time:year a rdf:Property, owl:FunctionalProperty;
    rdfs:label "year";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer year component of the dateTime.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

time:month a rdf:Property, owl:FunctionalProperty;
    rdfs:label "month";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer month component of the dateTime.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

time:day a rdf:Property, owl:FunctionalProperty;
    rdfs:label "day";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer day component of the dateTime.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

time:hour a rdf:Property, owl:FunctionalProperty;
    rdfs:label "hour";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the hour year component of the dateTime.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

time:minute a rdf:Property, owl:FunctionalProperty;
    rdfs:label "minute";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer minute component of the dateTime.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

time:second a rdf:Property, owl:FunctionalProperty;
    rdfs:label "second";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer year component of the dateTime.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

time:timeZone a rdf:Property, owl:FunctionalProperty;
    rdfs:label "timezone offset";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:string;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the trailing timezone offset
part, e.g.  "-05:00"..
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

###########


time:dayOfWeek a rdf:Property, owl:FunctionalProperty;
    rdfs:label "day of week";
    rdfs:domain xsd:dateTime;
    rdfs:range xsd:integer;
    rdfs:comment """
Iff the subject is a xsd:dateTime and the object is the integer the day number within the week, Sunday being 0.
The object can be calculated as a function of the subject.
""";
    rdfs:isDefinedBy <>.

########### Actual time access routines


time:gmTime a rdf:Property, owl:FunctionalProperty;
    rdfs:label "Universal Time";
    rdfs:domain time:format;
    rdfs:range xsd:string;
    rdfs:comment """
Iff the subject is a dateTime format string and the object is the
result of formatting the Universal Time of processing in the format given.
If the format string has zero length,
then the ISOdate standard format is used. 
[ is time:gmtime of ""]  the therefore the current date time.
It will end with "Z" as a timezone code.
The object can be calculated as a function of the subject.
Rules which use this function will of course NOT be repeatable.
""";
    rdfs:isDefinedBy <>.

time:localTime a rdf:Property, owl:FunctionalProperty;
    rdfs:label "local time";
    rdfs:domain time:format;
    rdfs:range xsd:string;
    rdfs:comment """
Iff the subject is a dateTime format string and the object is the
result of formatting the current time of processing and local timezone in the format given.
If the format string has zero length,
then the ISOdate standard format is used. 
[ is time:gmtime of ""]  the therefore the current date time.
It will end with "Z" as a timezone code.
The object can be calculated as a function of the subject.
Rules which use this function will of course NOT be repeatable.
""";
    rdfs:isDefinedBy <>.



#@@@ To be aded  localtime, gmtime, ... format, parse...
    #@@ add pointers to examples in test/time  etc

#     str.internFrag("timeZone", BI_timeZone)
#    str.internFrag("gmTime", BI_gmTime)
#    str.internFrag("localTime", BI_localTime)
#    str.internFrag("format", BI_format)

# ends
