# Notation3 Reasoner tests
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:   <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix rdft: <http://www.w3.org/ns/rdftest#> .
@prefix test: <https://w3c.github.io/N3/tests/test.n3#>.
@prefix :     <#>.

<>  a mf:Manifest ;
    mf:name "Notation3 Reasoner tests" ;
    mf:entries
    (
      # From swap/test/crypto

      # From swap/test/cwm

      # From swap/test/delta

      # From swap/test/i18n

      # From swap/test/includes
      :cwm_includes_listin :cwm_includes_bnode :cwm_includes_concat :cwm_includes_conclusion_simple
      :cwm_includes_conjunction

      # From swap/test/math

      # From swap/test/norm
      :cwm_norm_av1

      # From swap/test/list
      :cwm_list_bug1 :cwm_list_bug2 :cwm_list_r1 :cwm_list_unify2 :cwm_list_unify3 :cwm_list_unify4
      :cwm_list_unify5 :cwm_list_append :cwm_list_first :cwm_list_last :cwm_list_builtin_generated_match
      :list_in :list_member

      # From swap/test/paw

      # From swap/test/ql

      # From swap/test/reason
      :cwm_reason_t1 :cwm_reason_t2 :cwm_reason_t3 :cwm_reason_t4 :cwm_reason_t5 :cwm_reason_t6
      :cwm_reason_socrates :cwm_reason_t8
      :cwm_reason_t9 :cwm_reason_double

      # From swap/test/string
      :cwm_string_endsWith
      :cwm_string_roughly :cwm_string_uriEncode
      :string_startsWith :string_contains
      :string_containsIgnoringCase :string_equalIgnoringCase :string_format
      :string_notEqualIgnoringCase
      :string_greaterThan :string_lessThan :string_notGreaterThan :string_notLessThan
      :string_matches :string_notMatches :string_replace :string_scrape

      # From swap/test/supports
      :cwm_supports_simple

      # From swap/test/unify
      :cwm_unify_unify1 :cwm_unify_unify2 :cwm_unify_reflexive

    ) .

# List tests from swap/tests/includes

:cwm_includes_listin a test:TestN3Reason;
  mf:name      "list membership" ;
  rdfs:comment "Builtins for list membership, binding multiple values." ;
  mf:action <cwm_includes/list-in.n3>;
  mf:result <cwm_includes/list-in-ref.n3>;
  test:options [test:think true; test:data true;] .

:cwm_includes_bnode a test:TestN3Reason;
  mf:name      "list membership" ;
  rdfs:comment "Builtins for list membership, binding multiple values." ;
  mf:action <cwm_includes/bnodeConclude.n3>;
  mf:result <cwm_includes/bnode-conclude-ref.n3>;
  test:options [test:think true; test:data true;] .

:cwm_includes_concat a test:TestN3Reason;
  mf:name      "list concatenation" ;
  rdfs:comment "Builtins for list concatenation." ;
  mf:action <cwm_includes/concat.n3>;
  mf:result <cwm_includes/concat-ref.n3>;
  test:options [test:think true; test:data true;] .

:cwm_includes_conclusion_simple a test:TestN3Reason;
  mf:name      "includes-conclusion-simple.n3" ;
  rdfs:comment "Builtins for log:conclusion." ;
  mf:action <cwm_includes/conclusion-simple.n3>;
  mf:result <cwm_includes/conclusion-simple-ref.n3>;
  test:options [test:think true; test:data true;] .

:cwm_includes_conjunction a test:TestN3Reason;
  mf:name      "includes-conjunction.n3" ;
  rdfs:comment "Builtins for log:conjunction." ;
  mf:action <cwm_includes/conjunction.n3>;
  mf:result <cwm_includes/conjunction-ref.n3>;
  test:options [test:think true; test:data true;] .

# Tests from swap/test/norm
:cwm_norm_av1 a test:TestN3Reason;
  mf:name "norm-av1.n3";
  rdfs:comment   "Bug with RDF output in bySubject mode";
  mf:action <cwm_norm/av.n3>;
  mf:result <cwm_norm/av-ref.n3>;
  test:options [test:think true; test:data true;] .

# List tests from swap/test/list

:cwm_list_bug1 a test:TestN3Reason;
  mf:name      "list-bug1.n3" ;
  rdfs:comment "List processing bug check 1" ;
  mf:action <cwm_list/list-bug1.n3>;
  mf:result <cwm_list/list-bug1-ref.n3>;
  test:options [test:think true; test:data true;] .

:cwm_list_bug2 a test:TestN3Reason;
  mf:name      "list-bug2.n3" ;
  rdfs:comment "List processing bug check 2" ;
  mf:action <cwm_list/list-bug2.n3>;
  mf:result <cwm_list/list-bug2-ref.n3>;
  test:options [test:think true; test:filter true;] .

:list_in a test:TestN3Reason;
  mf:name      "li-in.n3" ;
  rdfs:comment "list:in" ;
  mf:action <list/in.n3>;
  mf:result <list/in-ref.n3>;
  test:options [test:think true; test:filter true;] .

:list_member a test:TestN3Reason;
  mf:name      "li-member.n3" ;
  rdfs:comment "list:member" ;
  mf:action <list/member.n3>;
  mf:result <list/member-ref.n3>;
  test:options [test:think true; test:filter true;] .

:cwm_list_r1 a test:TestN3Reason;
  mf:name      "li-r1.n3" ;
  rdfs:comment "Inference using lists" ;
  mf:action <cwm_list/r1.n3>;
  mf:result <cwm_list/r1-ref.n3>;
  test:options [test:think true; test:data true;] .

:cwm_list_unify2 a test:TestN3Reason;
  mf:name      "list-unify2.n3" ;
  rdfs:comment "List unification 2 - variable in list" ;
  mf:action <cwm_list/unify2.n3>;
  mf:result <cwm_list/unify2-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_list_unify3 a test:TestN3Reason;
  mf:name      "list-unify3.n3" ;
  rdfs:comment "List unification 3 - nested lists" ;
  mf:action <cwm_list/unify3.n3>;
  mf:result <cwm_list/unify3-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_list_unify4 a test:TestN3Reason;
  mf:name      "list-unify4.n3" ;
  rdfs:comment "List unification 4 - nested lists" ;
  mf:action <cwm_list/unify4.n3>;
  mf:result <cwm_list/unify4-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_list_unify5 a test:TestN3Reason;
  mf:name      "list-unify5.n3" ;
  rdfs:comment "List unification 5 - multiple values" ;
  mf:action <cwm_list/unify5.n3>;
  mf:result <cwm_list/unify5-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_list_append a test:TestN3Reason;
  mf:name      "append-out.n3" ;
  rdfs:comment "Iterative ops on lists" ;
  mf:action <cwm_list/append.n3>;
  mf:result <cwm_list/append-ref.n3>;
  test:options [test:think true; test:filter true] .

:cwm_list_first a test:TestN3Reason;
  mf:name      "list-first.n3" ;
  rdfs:comment "first, in builtins on lists" ;
  mf:action <cwm_list/first.n3>;
  mf:result <cwm_list/first-ref.n3>;
  test:options [test:think true; test:filter true] .

:cwm_list_last a test:TestN3Reason;
  mf:name      "list-last.n3" ;
  rdfs:comment "last, in builtins on lists" ;
  mf:action <cwm_list/last.n3>;
  mf:result <cwm_list/last-ref.n3>;
  test:options [test:think true; test:filter true] .

:cwm_list_builtin_generated_match a test:TestN3Reason;
  mf:name      "list-builtin_generated_match.n3" ;
  rdfs:comment "last, in builtins on lists" ;
  mf:action <cwm_list/builtin_generated_match.n3>;
  mf:result <cwm_list/builtin_generated_match-ref.n3>;
  test:options [test:think true; test:data true] .

# List tests from swap/test/reason

:cwm_reason_t1 a test:TestN3Reason;
  mf:name      "reason-t1.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t1.n3>;
  mf:result <cwm_reason/t1-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t2 a test:TestN3Reason;
  mf:name      "reason-t2.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t2.n3>;
  mf:result <cwm_reason/t2-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t3 a test:TestN3Reason;
  mf:name      "reason-t3.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t3.n3>;
  mf:result <cwm_reason/t3-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t4 a test:TestN3Reason;
  mf:name      "reason-t4.n3" ;
  rdfs:comment "Proof for just loading a file" ;
  mf:action <cwm_reason/t4.n3>;
  mf:result <cwm_reason/t4-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t5 a test:TestN3Reason;
  mf:name      "reason-t5.n3" ;
  rdfs:comment "Proof for a little inference" ;
  mf:action <cwm_reason/t5.n3>;
  mf:result <cwm_reason/t5-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t6 a test:TestN3Reason;
  mf:name      "reason-t6.n3" ;
  rdfs:comment "Proof for a little inference" ;
  mf:action <cwm_reason/t6.n3>;
  mf:result <cwm_reason/t6-ref.n3>;
  test:options [test:think true; test:data true] .

# This is equiv of others but easier to explain with famous example
:cwm_reason_socrates a test:TestN3Reason;
  mf:name      "reason-socrates.n3" ;
  rdfs:comment "Proof for a little inference" ;
  mf:action <cwm_reason/socrates.n3>;
  mf:result <cwm_reason/socrates-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t8 a test:TestN3Reason;
  mf:name      "reason-t8.n3" ;
  rdfs:comment "Proof for a little inference, --n3=B to name BNodes" ;
  mf:action <cwm_reason/t8.n3>;
  mf:result <cwm_reason/t8-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_t9 a test:TestN3Reason;
  mf:name      "reason-t9.n3" ;
  rdfs:comment "Proof for a little inference - binding Bnode to symbol" ;
  mf:action <cwm_reason/t9.n3>;
  mf:result <cwm_reason/t9-ref.n3>;
  test:options [test:think true; test:data true] .

:cwm_reason_double  a test:TestN3Reason; # too unstable!
  mf:name      "reason-double.n3" ;
  rdfs:comment "Proof for a little inference - binding Bnode to symbol" ;
  mf:action <cwm_reason/double.n3>;
  mf:result <cwm_reason/double-ref.n3>;
  test:options [test:think true; test:data true] .

# List tests from swap/test/string

:string_startsWith a test:TestN3Reason;
  mf:name      "string-startsWith.n3" ;
  rdfs:comment "string:startsWith" ;
  mf:action <string/startsWith.n3>;
  mf:result <string/startsWith-out.n3>;
  test:options [test:rules true; test:filter true] .

:cwm_string_endsWith a test:TestN3Reason;
  mf:name      "string-endsWith.n3" ;
  rdfs:comment "string:endsWith" ;
  mf:action <cwm_string/endsWith.n3>;
  mf:result <cwm_string/endsWith-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_contains a test:TestN3Reason;
  mf:name      "string-contains.n3" ;
  rdfs:comment "string:contains" ;
  mf:action <string/contains.n3>;
  mf:result <string/contains-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_containsIgnoringCase a test:TestN3Reason;
  mf:name      "string-containsIgnoringCase.n3" ;
  rdfs:comment "string:containsIgnoringCase" ;
  mf:action <string/containsIgnoringCase.n3>;
  mf:result <string/containsIgnoringCase-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_equalIgnoringCase a test:TestN3Reason;
  mf:name      "string-equalIgnoringCase.n3" ;
  rdfs:comment "string:equalIgnoringCase" ;
  mf:action <string/equalIgnoringCase.n3>;
  mf:result <string/equalIgnoringCase-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_format a test:TestN3Reason;
  mf:name      "string-format.n3" ;
  rdfs:comment "string:format" ;
  mf:action <string/format.n3>;
  mf:result <string/format-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_greaterThan a test:TestN3Reason;
  mf:name      "string-greaterThan.n3" ;
  rdfs:comment "string:greaterThan" ;
  mf:action <string/greaterThan.n3>;
  mf:result <string/greaterThan-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_lessThan a test:TestN3Reason;
  mf:name      "string-lessThan.n3" ;
  rdfs:comment "string:lessThan" ;
  mf:action <string/lessThan.n3>;
  mf:result <string/lessThan-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_matches a test:TestN3Reason;
  mf:name      "string-matches.n3" ;
  rdfs:comment "string:matches" ;
  mf:action <string/matches.n3>;
  mf:result <string/matches-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_notEqualIgnoringCase a test:TestN3Reason;
  mf:name      "string-notEqualIgnoringCase.n3" ;
  rdfs:comment "string:notEqualIgnoringCase" ;
  mf:action <string/notEqualIgnoringCase.n3>;
  mf:result <string/notEqualIgnoringCase-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_notGreaterThan a test:TestN3Reason;
  mf:name      "string-notGreaterThan.n3" ;
  rdfs:comment "string:notGreaterThan" ;
  mf:action <string/notGreaterThan.n3>;
  mf:result <string/notGreaterThan-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_notLessThan a test:TestN3Reason;
  mf:name      "string-notLessThan.n3" ;
  rdfs:comment "string:notLessThan" ;
  mf:action <string/notLessThan.n3>;
  mf:result <string/notLessThan-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_notMatches a test:TestN3Reason;
  mf:name      "string-notMatches.n3" ;
  rdfs:comment "string:notMatches" ;
  mf:action <string/notMatches.n3>;
  mf:result <string/notMatches-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_replace a test:TestN3Reason;
  mf:name      "string-replace.n3" ;
  rdfs:comment "string:replace" ;
  mf:action <string/replace.n3>;
  mf:result <string/replace-out.n3>;
  test:options [test:rules true; test:filter true] .

:string_scrape a test:TestN3Reason;
  mf:name      "string-scrape.n3" ;
  rdfs:comment "string:scrape" ;
  mf:action <string/scrape.n3>;
  mf:result <string/scrape-out.n3>;
  test:options [test:rules true; test:filter true] .

:cwm_string_roughly a test:TestN3Reason;
  mf:name      "string-roughly.n3" ;
  rdfs:comment "string:containsRoughly ignores case smart whitespace" ;
  mf:action <cwm_string/roughly.n3>;
  mf:result <cwm_string/roughly-out.n3>;
  test:options [test:rules true; test:filter true] .

:cwm_string_uriEncode a test:TestN3Reason;
  mf:name      "string-uriEncode.n3" ;
  rdfs:comment "string:encodeForURI and encodeForFragID" ;
  mf:action <cwm_string/uriEncode.n3>;
  mf:result <cwm_string/uriEncode-out.n3>;
  test:options [test:rules true; test:filter true] .

# List tests from swap/test/supports
:cwm_supports_simple a test:TestN3Reason;
  mf:name      "supports-simple.n3" ;
  rdfs:comment "A very simple use of log:supports" ;
  mf:action <cwm_supports/simple.n3>;
  mf:result <cwm_supports/simple-ref.n3>;
  test:options [test:rules true; test:data true] .

# List tests from swap/test/unify
:cwm_unify_unify1 a test:TestN3Reason;
  mf:name      "unify-unify1.n3" ;
  rdfs:comment "log:includes looking for @forAll" ;
  mf:action <cwm_unify/unify1.n3>;
  mf:result <cwm_unify/unify1-ref.n3>;
  test:options [test:rules true; test:data true] .

:cwm_unify_unify2 a test:TestN3Reason;
  mf:name      "unify-unify2.n3" ;
  rdfs:comment "Query looking for @forAll" ;
  mf:action <cwm_unify/unify2.n3>;
  mf:result <cwm_unify/unify2-ref.n3>;
  test:options [test:rules true; test:data true] .

:cwm_unify_reflexive a test:TestN3Reason;
  mf:name      "unify-reflexive.n3" ;
  rdfs:comment "Include using the same var twice" ;
  mf:action <cwm_unify/reflexive.n3>;
  mf:result <cwm_unify/reflexive-ref.n3>;
  test:options [test:rules true; test:data true] .

