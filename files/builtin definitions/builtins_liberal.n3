@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix : <http://www.w3.org/2000/10/swap/builtin#> .
@base <http://www.w3.org/2000/10/swap/builtin#> .

:concrete a :ConcreteTypeRestriction .
:variable a :VariableTypeRestriction .
:resource a :ResourceTypeRestriction .
:formula a :FormulaTypeRestriction .
:numberable a :NumberableTypeRestriction .
:intable a :IntableTypeRestriction .
:stringable a :StringableTypeRestriction .
:list a :ListTypeRestriction .
:regex a :RegexTypeRestriction .
:any a :AnyTypeRestriction .

:numberableOrVariable :oneOf ( :numberable :variable ) .
:intableOrVariable :oneOf ( :intable :variable ) .
:stringableOrVariable :oneOf ( :stringable :variable ) .
:regexOrVariable :oneOf ( :regex :variable ) .
:resourceOrVariable :oneOf ( :resource :variable ) .
:listOrVariable :oneOf ( :list :variable ) .
:formulaOrVariable :oneOf ( :formula :variable ) .

:concreteList a :ListTypeRestriction ; 
	:listElementType :concrete .
:numberableList a :ListTypeRestriction ; 
	:listElementType :numberable .
:numberableOrVariableList a :ListTypeRestriction ; 
	:listElementType :numberableOrVariable .
:stringableList a :ListTypeRestriction ; 
	:listElementType :stringable .
:stringableOrVariableList a :ListTypeRestriction ; 
	:listElementType :stringableOrVariable .

:maxOneVar a :VariableTypeRestriction ;
	:cardinality [ a :Max ; rdf:value 1 ] .
	
:exactOneVar a :VariableTypeRestriction ;
	:cardinality [ a :Exact ; rdf:value 1 ] .

:concreteNumbers a :InputConstraintsDefinition ;
	:domain [
		:subject [ :restricts :numberableOrVariable ] ;
		:object [ :restricts :numberableOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :numberable ] ;
		:object [ :restricts :numberable ]
	] ;
	:trueFor [ a :Other ] .
	
:unequalNumbers a :InputConstraintsDefinition ;
	:domain [
		:subject [ :restricts :numberableOrVariable ] ;
		:object [ :restricts :numberableOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :numberable ] ;
		:object [ :restricts :numberable ]
	] ;
	:falseFor [
		:subjectObject [ :restricts :exactOneVar ]
	] ;
	:trueFor [ a :Other ] .
	
:concreteNumberListAndNumberOrVariable a :InputConstraintsDefinition ;
	:domain [
		:subject [
			:oneOf ( 
				[ :restricts :numberableOrVariableList ]
				[ :restricts :variable ]
			) ] ;
		:object [ :restricts :numberableOrVariable ] ;
	] ;
	:checkFor [
		:subject [ :restricts :numberableList ] ;
		:object [ :restricts :numberableOrVariable ]
	] ;
	:trueFor [ a :Other ] .

:twoNumberListAndNumberOrVariable a :InputConstraintsDefinition ;
	:domain [
		:subject [
			:oneOf (
				[ :size [ a :Exact ; rdf:value 2 ] ; :listElementType [ :restricts :numberableOrVariable ] ]
				[ :restricts :variable ]
			) ] ;
		:object [ :restricts :numberableOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :numberableList ] ;
		:object [ :restricts :numberableOrVariable ]
	] ;
	:trueFor [ a :Other ] .
	
:numberOrVariable a :InputConstraintsDefinition ;
	:domain [
		:subject [ :restricts :numberableOrVariable ] ;
		:object [ :restricts :numberableOrVariable ] ;
	] ;
	:checkFor [ 
		:oneOf ( [ 
			:subject [ :restricts :numberable ] ; :object [ :restricts :numberableOrVariable ]
		] [ 
			:subject [ :restricts :numberableOrVariable ] ; :object [ :restricts :numberable ]
		] ) ] ;
	:trueFor [ a :Other ] .

:numberAndNumberOrVariable a :InputConstraintsDefinition ;
	:domain [
		:subject [ :restricts :numberableOrVariable ] ;
		:object [ :restricts :numberableOrVariable ] ;
	] ;
	:checkFor [ 
		:subject [ :restricts :numberable ] ; 
		:object [ :restricts :numberableOrVariable ] 
	] ;
	:trueFor [ a :Other ] .
	
:stringAndRegex a :InputConstraintsDefinition ;
	:domain [
			:subject [ :restricts :stringableOrVariable ] ;
			:object [ :restricts :regexOrVariable ]
		] ;
		:checkFor [
			:subject [ :restricts :stringable ] ;
			:object [ :restricts :regex ]
		] ;
		:trueFor [ a :Other ] .

:stringAndStringOrVariable a :InputConstraintsDefinition ;
	:domain [
		:subject [ :restricts :stringableOrVariable ] ;
		:object [ :restricts :stringableOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :stringable ] ;
		:object [ :restricts :stringableOrVariable ]
	] ;
	:trueFor [ a :Other ] .

:concreteStringListAndStringOrVariable a :InputConstraintsDefinition ;
	:domain [
		:subject [ 
			:oneOf ( 
				[ :restricts :stringableOrVariableList ] 
				[ :restricts :variable ] 
			) ] ;
		:object [ :restricts :stringableOrVariable ]
	] ;
	:checkFor [ 
		:subject [ :restricts :stringableList ] ;
		:object [ :restricts :stringableOrVariable ]
	] ;
	:trueFor [ a :Other ] .

math:equalTo
	a :BuiltinDefinition ;
	:inputConstraints :concreteNumbers .

math:notEqualTo
	a :BuiltinDefinition ;
	:inputConstraints :unequalNumbers .
	
math:greaterThan
	a :BuiltinDefinition ;
	:inputConstraints :unequalNumbers .
	
math:notGreaterThan
	a :BuiltinDefinition ;
	:inputConstraints :concreteNumbers .
	
math:lessThan
	a :BuiltinDefinition ;
	:inputConstraints :unequalNumbers .
	
math:notLessThan
	a :BuiltinDefinition ;
	:inputConstraints :concreteNumbers .
	
math:sum
    a :BuiltinDefinition ;
	:inputConstraints :concreteNumberListAndNumberOrVariable .
	
math:product
    a :BuiltinDefinition ;
	:inputConstraints :concreteNumberListAndNumberOrVariable .
	
math:quotient
    a :BuiltinDefinition ;
	:inputConstraints :twoNumberListAndNumberOrVariable .
	
math:difference
	a :BuiltinDefinition ;
	:inputConstraints :twoNumberListAndNumberOrVariable .
	
math:exponentiation
	a :BuiltinDefinition ;
	:inputConstraints :twoNumberListAndNumberOrVariable .
	
math:remainder
	a :BuiltinDefinition ;
	:inputConstraints :twoNumberListAndNumberOrVariable .
	
math:logarithm
	a :BuiltinDefinition ;
	:inputConstraints :twoNumberListAndNumberOrVariable .

math:negation
	a :BuiltinDefinition ;
	:inputConstraints :numberOrVariable .
	
math:absoluteValue
	a :BuiltinDefinition ;
	:inputConstraints :numberAndNumberOrVariable .
	
math:rounded
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [
				:oneOf (
					[ :listElements ( :numberableOrVariable :intableOrVariable ) ]
					[ :restricts :variable ]
			) ] ;
			:object :numberableOrVariable
		] ;
		:checkFor [
			:subject [ :listElements ( :numberable :intable ) ] ;
			:object :numberableOrVariable
		] ;
		:trueFor [ a :Other ]
	] .

math:ceiling
	a :BuiltinDefinition ;
	:inputConstraints :numberAndNumberOrVariable .
	
math:floor
	a :BuiltinDefinition ;
	:inputConstraints :numberAndNumberOrVariable .

math:degrees
	a :BuiltinDefinition ;
	:inputConstraints :numberOrVariable .

math:sin
	a :BuiltinDefinition ;
	:inputConstraints :numberOrVariable .
	
math:sinh
	a :BuiltinDefinition ;
	:inputConstraints :numberAndNumberOrVariable .
	
math:cos 
	a :BuiltinDefinition ;
	:inputConstraints :numberOrVariable .
	
math:cosh
	a :BuiltinDefinition ;
	:inputConstraints :numberAndNumberOrVariable .

math:tan
	a :BuiltinDefinition ;
	:inputConstraints :numberOrVariable .
	
math:tanh
	a :BuiltinDefinition ;
	:inputConstraints :numberAndNumberOrVariable .

string:scrape
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject 
				[ :oneOf (
					[ :listElements ( [ :restricts :stringableOrVariable ] [ :restricts :regexOrVariable ] ) ]
					[ :restricts :variable ]
				) ] ;
			:object [ :restricts :stringableOrVariable ]
		] ;
		:checkFor [
			:subject [ :listElements ( [ :restricts :stringable ] [ :restricts :regex ] ) ] ;
			:object [ :restricts :stringableOrVariable ]
		] ;
		:trueFor [ a :Other ] 
	] .
	
string:matches
	a :BuiltinDefinition ;
	:inputConstraints :stringAndRegex .
	
string:notMatches
	a :BuiltinDefinition ;
	:inputConstraints :stringAndRegex .
	
string:concatenation
	a :BuiltinDefinition ;
	:inputConstraints :concreteStringListAndStringOrVariable .
	
string:length
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [ :restricts :stringableOrVariable ] ;
			:object [ :restricts :intableOrVariable ] ;
		] ;
		:checkFor [
			:subject [ :restricts :stringable ] ;
			:object [ :restricts :intableOrVariable ] ;
		] ;
		:trueFor [ a :Other ]		
	] .
	
string:upperCase
	a :BuiltinDefinition ;
	:inputConstraints :stringAndStringOrVariable .

string:lowerCase
	a :BuiltinDefinition ;
	:inputConstraints :stringAndStringOrVariable .

string:replace
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [ 
				:oneOf ( 
					[ :size [ a :Exact; rdf:value 3 ] ; :listElementType [ :restricts :stringableOrVariable ] ]
					[ :restricts :variable ] 
				) ] ;
			:object [ :restricts :stringableOrVariable ]
		] ;
		:checkFor [ 
			:subject [ :size [ a :Exact; rdf:value 3 ] ; :listElementType [ :restricts :stringable ] ] ;
			:object [ :restricts :stringableOrVariable ]
		] ;
		:trueFor [ a :Other ]
	] .

list:length
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [ :restricts :listOrVariable ] ;
			:object [ :restricts :intableOrVariable ]
		] ;
		:checkFor [
			:subject [ :restricts :list ] ;
			:object [ :restricts :intableOrVariable ]
		] ;
		:trueFor [ a :Other ]
	] .

list:member
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [ :restricts :listOrVariable ] ;
			:object [ :restricts :resourceOrVariable ]
		] ;
		:checkFor [
			:subject [ :restricts :list ] ;
			:object [ :restricts :resourceOrVariable ]
		] ;	
		:trueFor [ a :Other ]
	] .
	
list:memberAt
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject 
				[ :oneOf (
					[ :listElements ( [ :restricts :listOrVariable ] [ :restricts :intableOrVariable ] ) ]
					[ :restricts :variable ]
				) ] ;
			:object [ :restricts :resourceOrVariable ]
		] ;
		:checkFor [
			:subject [ :listElements ( [ :restricts :list ] [ :restricts :intable ] ) ] ;
			:object [ :restricts :resourceOrVariable ]
		] ;
		:trueFor [ a :Other ]
	] .
	
log:forAllIn 
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [
				:oneOf (
					[ :size [ a :Exact ; rdf:value 2 ] ; :listElementType [ :restricts :formulaOrVariable ] ]
					[ :restricts :variable ]
			) ] ;
			:object [ :restricts :any ] 
		] ;
		:checkFor [
			:subject [ :size [ a :Exact ; rdf:value 2 ] ; :listElementType [ :restricts :formula ] ] ;
			:object [ :restricts :any ]
		] ;
		:trueFor [ a :Other ]
	] .
		
:exact3Vars
	a :VariableTypeRestriction ; 
	:cardinality [ a :Exact ; rdf:value 3 ] . 
	
log:test
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:oneOf ( [
				:subject [ :listElementType :exact3Vars ] ;
				:object [ :restricts :any ]
			] [
				:subject [ :restricts :any ] ;
				:object [ :listElementType :exact3Vars ]
			] )
		] ;
		:checkFor [ a :DomainMatch ] ;
		:trueFor [ a :Other ]
	] .
	
log:uri
	a :BuiltinDefinition;
	:inputConstraints [
		:domain [
			:subject [ :restricts :resourceOrVariable ] ;
			:object [ :restricts :stringableOrVariable ]
		] ;
		:checkFor [
			:oneOf ( [ 	
				:subject [ :restricts :resourceOrVariable ] ;
				:object [ :restricts :stringable ]
			] [
			 	:subject [ :restricts :resource ] ;
				:object [ :restricts :stringableOrVariable ]
			] )
		] ;
		:trueFor [ a :Other ]
	] .
	
log:collectAllIn 
	a :BuiltinDefinition ;
	:inputConstraints [
		:domain [
			:subject [
				:oneOf (
					[ :listElements ( [ :restricts :variable ] 
						[ :restricts :formulaOrVariable ] 
						[ :restricts :listOrVariable ] ) ]
					[ :restricts :variable ]
			) ] ;
			:object [ :restricts :any ]
		] ;
		:checkFor [
			:subject [ :listElements ( [ :restricts :variable ] 
				[ :restricts :formula ] 
				[ :restricts :listOrVariable ] ) ] ;
			:object [ :restricts :any ] 
		] ;
		:trueFor [
			:subject [ :listElementType [ a :VariableTypeRestriction ; 
				:cardinality [ a :Exact ; rdf:value 3 ] ] ] ;
			:object [ :restricts :any ]
		] ;
		:falseFor [ a :Other ]
	] .