@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix : <http://www.w3.org/2000/10/swap/builtin#> .
@base <http://www.w3.org/2000/10/swap/builtin#> .

:variable a :VariableTypeRestriction .
:resource a :ResourceTypeRestriction .
:numeric a :NumericTypeRestriction .
:string a :StringTypeRestriction .
:list a :ListTypeRestriction .
:regex a :RegexTypeRestriction .

:numericOrVariable :oneOf ( :numeric :variable ) .
:stringOrVariable :oneOf ( :string :variable ) .
:regexOrVariable :oneOf ( :regex :variable ) .
:resourceOrVariable :oneOf ( :resource :variable ) .
:listOrVariable :oneOf ( :list :variable ) .

:numericList a :ListTypeRestriction ; 
	:listElementType :numeric .
:numericOrVariableList a :ListTypeRestriction ; 
	:listElementType :numericOrVariable .
:stringList a :ListTypeRestriction ; 
	:listElementType :string .
:stringOrVariableList a :ListTypeRestriction ; 
	:listElementType :stringOrVariable .

:maxOneVar a :VariableTypeRestriction ;
	:cardinality [ a :Max ; rdf:value 1 ; :scope [ a :ClauseScope ] ] .
	
:exactOneVar a :VariableTypeRestriction ;
	:cardinality [ a :Exact ; rdf:value 1 ; :scope [ a :ClauseScope ] ] .

math:equalTo
	a :BuiltinDefinition ;
	:domain [
		:subject [ :restricts :numericOrVariable ] ;
		:object [ :restricts :numericOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :numeric ] ;
		:object [ :restricts :numeric ]
	] ;
	:trueFor [
		:subjectObject [ :restricts [ :type :Variable ; :exactCardinality 1 ] ]
	] .
	
math:greaterThan
	a :BuiltinDefinition ;
	:domain [
		:subject [ :restricts :numericOrVariable ] ;
		:object [ :restricts :numericOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :numeric ] ;
		:object [ :restricts :numeric ]
	] ;
	:falseFor [
		:subjectObject [ :restricts [ :type :Variable ; :exactCardinality 1 ] ]
	] ;
	:trueFor [ a :Other ] .

math:lessThan
	a :BuiltinDefinition ;
	:domain [
		:subject [ :restricts :numericOrVariable ] ;
		:object [ :restricts :numericOrVariable ]
	] ;
	:checkFor [
		:subject [ :restricts :numeric ] ;
		:object [ :restricts :numeric ]
	] ;
	:falseFor [
		:subjectObject [ :restricts [ :type :Variable ; :exactCardinality 1 ] ]
	] ;
	:trueFor [ a :Other ] .
	
math:sum
    a :BuiltinDefinition ;
	:domain [
		:subject [
			:oneOf ( 
				[ :restricts :numericOrVariableList ]
				[ :restricts :variable ]
			) ] ;
		:object [ :restricts :numericOrVariable ] ;
	] ;
	:checkFor [
		:oneOf ( [
			:subject [ :restricts :numericList ] ;
			:object [ :restricts :numericOrVariable ]
		] [
			:subject [ :listElementType [ :oneOf 
				( [ :restricts [ :type :Variable ; :maxCardinality 1 ] ] [ :restricts :numeric ] ) ]] ;
			:object [ :restricts :numeric ]
		] ) ] ;
	:trueFor [ a :Other ] .
	
math:difference
	a :BuiltinDefinition ;
	:domain [
		:subject [
			:oneOf (
				[ :size [ a :Exact ; rdf:value 2 ] ; :listElementType [ :restricts :numericOrVariable ]]
				[ :restricts :variable ]
			) ] ;
		:object [ :restricts :numericOrVariable ] ;
	] ;
	:checkFor [
		:oneOf ( [ 
			:subject [ :restricts :numericList ] ;
			:object [ :restricts :numericOrVariable ]
		] [
			:subject [ :listElementType [ :oneOf 
				( [ :restricts [ :type :Variable ; :maxCardinality 1 ] ] [ :restricts :numeric ] ) ]] ;
			:object [ :restricts :numeric ]
		] ) ] ;
	:trueFor [ a :Other ] .
	
math:absoluteValue
	a :BuiltinDefinition ;
	:domain [
		:subject [ :restricts :numericOrVariable ] ;
		:object [ :restricts :numericOrVariable ] ;
	] ;
	:checkFor [ :subject [ :restricts :numeric ] ; :object [ :restricts :numericOrVariable ]] ;
	:trueFor [ a :Other ] .
	
math:cos 
	a :BuiltinDefinition ;
	:domain [
		:subject [ :restricts :numericOrVariable ] ;
		:object [ :restricts :numericOrVariable ]
	] ;
	:checkFor [ 
		:oneOf ( [ 
			:subject [ :restricts :numeric ] ; :object [ :restricts :numericOrVariable ]
		] [ 
			:subject [ :restricts :numericOrVariable ] ; [ :restricts :numeric ]
		] ) ] ;
	:trueFor [ a :Other ] .
	
string:scrape
	a :BuiltinDefinition ;
	:domain [
		:subject 
			[ :oneOf (
				[ :listElements ( [ :restricts :regexOrVariable ] [ :restricts :stringOrVariable ] ) ]
				[ :restricts :variable ]
			) ] ;
		:object [ :restricts :stringOrVariable ]
	] ;
	:checkFor [
		:subject [ :listElements ( [ :restricts :regex ] [ :restricts :string ] ) ] ;
		:object [ :restricts :stringOrVariable ]
	] ;
	:trueFor [ a :Other ] .
	
string:concatenation
	a :BuiltinDefinition ;
	:domain [
		:subject 
			[ :oneOf ( [ :restricts :stringOrVariableList ] [ :restricts :variable ] ) ] ;
		:object [ :restricts :stringOrVariable ]
	] ;
	:checkFor [ 
		:subject [ :restricts :stringList ] ;
		:object [ :restricts :stringOrVariable ]
	] ;
	:trueFor [ a :Other ] .
	
list:memberAt
	a :BuiltinDefinition ;
	:domain [
		:subject 
			[ :oneOf (
				[ :listElements ( [ :restricts :listOrVariable ] [ :restricts :numericOrVariable ] ) ]
				[ :restricts :variable ]
			) ] ;
		:object [ :restricts :resourceOrVariable ]
	] ;
	:checkFor [ 
		:oneOf ( [
			:subject [ :listElements ( [ :restricts :list ] [ :restricts :numeric ] ) ] ;
			:object [ :oneOf ( [ :restricts :resource ] [ :restricts :variable ] ) ]
		] [
			:subject [ :listElements ( [ :restricts :list ] [ :restricts :numericOrVariable ] ) ] ;
			:object [ :restricts :resource ]
	] ) ] ;	
	:trueFor [ a :Other ] .