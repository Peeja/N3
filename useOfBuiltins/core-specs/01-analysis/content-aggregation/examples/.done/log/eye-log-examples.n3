@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#>.
@prefix time: <http://www.w3.org/2000/10/swap/time#>.
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix med: <http://eulersharp.sourceforge.net/2006/02swap/med#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix : <http://eulersharp.sourceforge.net/2007/07test#>.

### test data
# :a :b :c, :d.
# :s :p :o1, :o2.
# {?S :b ?O} => {?O :p ?S}.
# :Socrates a :Male, :Mortal.
# :Xanthippe a :Female, :Human.

### unit tests for log: builtins
{(true) log:conjunction true} => {:logc1 :result true}.
{(true {:u :v :w} {:x :y :z. :j :k :l}) log:conjunction {:u :v :w. :x :y :z. :j :k :l}} => {:logc2 :result true}.
{(true {:u :v :w} true true) log:conjunction {:u :v :w}} => {:logc3 :result true}.
{(:a ?A) log:equalTo (?B :b)} => {:loge1 :result true}.
{{:a :b :c} log:equalTo {:a :b :c}} => {:loge2 :result true}.
{{:a :b :_c} log:equalTo {:a :b _:c}} => {:loge3 :result true}.
{<abc.n3> log:semantics ?X. ?X log:equalTo {:a :b :c}} => {:loges0 :result true}.
{<ab_c.n3> log:semantics ?X. ?X log:equalTo {:a :b _:c}} => {:loges3 :result true}.
#{($ "a" "b" "c" "c" "a" $) log:equalTo ($ "c" "b" "b" "a" "c" $)} => {:loget1 :result true}.
{{:b :a :c. :e :d :f. :h :g :i. :k :j :l} log:includes {:k :j :l. ?X :d ?Z}} => {:logi1 :result true}.
{<medic.n3> log:semantics ?F. ?F log:includes {med:aspirinHighDose med:excludedFor med:AllergyForAspirin}} => {:logi3 :result true}.
{{:a :b :c} log:includes {:a :b :c}} => {:logid0 :result true}.
{{:a :b :c} log:includes {:a :b _:c}} => {:logid1 :result true}.
{{:a :b :_c} log:includes {:a :b _:c}} => {:logid3 :result true}.
{<abc.n3> log:semantics ?X. ?X log:includes {:a :b :c}} => {:logis0 :result true}.
{<abc.n3> log:semantics ?X. ?X log:includes {:a :b _:c}} => {:logis1 :result true}.
{<ab_c.n3> log:semantics ?X. ?X log:includes {:a :b _:c}} => {:logis3 :result true}.
{:a log:notEqualTo :b} => {:logne1 :result true}.
{{:a :b :c} log:notEqualTo {:a :b :_c}} => {:logned1 :result true}.
{{:a :b :_c} log:notEqualTo {:a :b :c}} => {:logned2 :result true}.
{<medic.n3> log:semantics ?F. ?F log:notIncludes {med:aspirinLowDose med:excludedFor med:SevereAsthma}} => {:logni3 :result true}.
{{:a :b :_c} log:notIncludes {:a :b :c}} => {:lognid2 :result true}.
{<ab_c.n3> log:semantics ?X. ?X log:notIncludes {:a :b :c}} => {:lognis2 :result true}.
{<ab_c.n3> log:semantics ?X. <abc.n3> log:semantics ?Y. ?X log:notIncludes ?Y} => {:lognis4 :result true}.
{<http://eulersharp.sourceforge.net/2006/02swap/med#Fever> log:uri "http://eulersharp.sourceforge.net/2006/02swap/med#Fever"} => {:logu1 :result true}.
{:betaBlocker log:uri "http://eulersharp.sourceforge.net/2007/07test#betaBlocker"} => {:logu2 :result true}.

