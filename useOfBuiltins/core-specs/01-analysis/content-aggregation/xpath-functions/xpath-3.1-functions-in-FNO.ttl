
    @prefix dc: <http://purl.org/dc/terms/> .
    @prefix fno: <https://w3id.org/function/ontology#> .
    @prefix owl: <http://www.w3.org/2002/07/owl#> .
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
    @prefix skos: <http://www.w3.org/2004/02/skos/core#> .
    @prefix uml: <http://schema.omg.org/spec/UML/2.1#> .
    @prefix xpath-fn: <http://www.w3.org/2005/xpath-functions#> .
    @prefix xpath-math: <http://www.w3.org/2005/xpath-functions/math#> .
    @prefix xpath-map: <http://www.w3.org/2005/xpath-functions/map#> .
    @prefix xpath-array: <http://www.w3.org/2005/xpath-functions/array#> .
    @prefix xpath-op: <http://www.w3.org/2005/xpath-functions/op#> .    
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

    
    xpath-fn:node-name a fno:Function ;
        fno:name "node-name" ;
        dc:description "Returns the name of a node, as an xs:QName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:QName?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:nilled a fno:Function ;
        fno:name "nilled" ;
        dc:description "Returns true for an element that is nilled." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:string a fno:Function ;
        fno:name "string" ;
        dc:description "Returns the value of $arg represented as an xs:string." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "string(23)" ;
                fno:result "\"23\"" ]
            [ a fno:Test ;
                fno:expression "string(false())" ;
                fno:result "\"false\"" ]
            [ a fno:Test ;
                fno:expression "string(\"Paris\")" ;
                fno:result "\"Paris\"" ]
            [ a fno:Test ;
                fno:expression "string((1, 2, 3))" ;
                fno:result "" ]
            [ a fno:Test ;
                fno:expression "string([[1, 2], [3, 4]])" ;
                fno:result "" ]
            [ a fno:Test ;
                fno:expression "string(abs#1)" ;
                fno:result "" ]
            [ a fno:Test ;
                fno:expression "string($para)" ;
                fno:result "\"In a hole in the ground there lived a hobbit.\"" ] ) ;
        .
    
    xpath-fn:data a fno:Function ;
        fno:name "data" ;
        dc:description "Returns the result of atomizing a sequence. This process flattens arrays, and replaces nodes by their typed values." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "data(123)" ;
                fno:result "123" ]
            [ a fno:Test ;
                fno:expression "data((123, 456))" ;
                fno:result "123, 456" ]
            [ a fno:Test ;
                fno:expression "data([[1,2],[3,4]])" ;
                fno:result "1, 2, 3, 4" ]
            [ a fno:Test ;
                fno:expression "data($para)" ;
                fno:result "xs:untypedAtomic(\"In a hole in the ground there lived a hobbit.\")" ]
            [ a fno:Test ;
                fno:expression "data($para/term/@author)" ;
                fno:result "xs:untypedAtomic(\"Tolkien\")" ]
            [ a fno:Test ;
                fno:expression "data(abs#1)" ;
                fno:result "" ] ) ;
        .
    
    xpath-fn:base-uri a fno:Function ;
        fno:name "base-uri" ;
        dc:description "Returns the base URI of a node." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:document-uri a fno:Function ;
        fno:name "document-uri" ;
        dc:description "Returns the URI of a resource where a document can be found, if available." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:error a fno:Function ;
        fno:name "error" ;
        dc:description "Calling the fn:error function raises an application-defined error." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "code" ;
                fno:type "xs:QName?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "code" ;
                fno:type "xs:QName?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "description" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "code" ;
                fno:type "xs:QName?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "description" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "error-object" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "none" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:error()" ;
                fno:result "" ]
            [ a fno:Test ;
                fno:expression "fn:error(fn:QName(\'http://www.example.com/HR\', \'myerr:toohighsal\'), \'Does not apply because salary is too high\')" ;
                fno:result "" ] ) ;
        .
    
    xpath-fn:trace a fno:Function ;
        fno:name "trace" ;
        dc:description "Provides an execution trace intended to be used in debugging queries." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "label" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-add a fno:Function ;
        fno:name "numeric-add" ;
        dc:description "Returns the arithmetic sum of its operands: ($arg1 + $arg2)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-subtract a fno:Function ;
        fno:name "numeric-subtract" ;
        dc:description "Returns the arithmetic difference of its operands: ($arg1 - $arg2)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-multiply a fno:Function ;
        fno:name "numeric-multiply" ;
        dc:description "Returns the arithmetic product of its operands: ($arg1 * $arg2)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-divide a fno:Function ;
        fno:name "numeric-divide" ;
        dc:description "Returns the arithmetic quotient of its operands: ($arg1 div $arg2)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-integer-divide a fno:Function ;
        fno:name "numeric-integer-divide" ;
        dc:description "Performs an integer division." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(10,3)" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(3,-2)" ;
                fno:result "-1" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(-3,2)" ;
                fno:result "-1" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(-3,-2)" ;
                fno:result "1" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(9.0,3)" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(-3.5,3)" ;
                fno:result "-1" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(3.0,4)" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(3.1E1,6)" ;
                fno:result "5" ]
            [ a fno:Test ;
                fno:expression "op:numeric-integer-divide(3.1E1,7)" ;
                fno:result "4" ] ) ;
        .
    
    xpath-op:numeric-mod a fno:Function ;
        fno:name "numeric-mod" ;
        dc:description "Returns the remainder resulting from dividing $arg1, the dividend, by $arg2, the divisor." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:numeric-mod(10,3)" ;
                fno:result "1" ]
            [ a fno:Test ;
                fno:expression "op:numeric-mod(6,-2)" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "op:numeric-mod(4.5,1.2)" ;
                fno:result "0.9" ]
            [ a fno:Test ;
                fno:expression "op:numeric-mod(1.23E2, 0.6E1)" ;
                fno:result "3.0E0" ] ) ;
        .
    
    xpath-op:numeric-unary-plus a fno:Function ;
        fno:name "numeric-unary-plus" ;
        dc:description "Returns its operand with the sign unchanged: (+ $arg)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-unary-minus a fno:Function ;
        fno:name "numeric-unary-minus" ;
        dc:description "Returns its operand with the sign reversed: (- $arg)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-equal a fno:Function ;
        fno:name "numeric-equal" ;
        dc:description "Returns true if and only if the value of $arg1 is equal to the value of $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-less-than a fno:Function ;
        fno:name "numeric-less-than" ;
        dc:description "Returns true if and only if $arg1 is numerically less than $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:numeric-greater-than a fno:Function ;
        fno:name "numeric-greater-than" ;
        dc:description "Returns true if and only if $arg1 is numerically greater than $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:abs a fno:Function ;
        fno:name "abs" ;
        dc:description "Returns the absolute value of $arg." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:abs(10.5)" ;
                fno:result "10.5" ]
            [ a fno:Test ;
                fno:expression "fn:abs(-10.5)" ;
                fno:result "10.5" ] ) ;
        .
    
    xpath-fn:ceiling a fno:Function ;
        fno:name "ceiling" ;
        dc:description "Rounds $arg upwards to a whole number." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:ceiling(10.5)" ;
                fno:result "11" ]
            [ a fno:Test ;
                fno:expression "fn:ceiling(-10.5)" ;
                fno:result "-10" ] ) ;
        .
    
    xpath-fn:floor a fno:Function ;
        fno:name "floor" ;
        dc:description "Rounds $arg downwards to a whole number." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:floor(10.5)" ;
                fno:result "10" ]
            [ a fno:Test ;
                fno:expression "fn:floor(-10.5)" ;
                fno:result "-11" ] ) ;
        .
    
    xpath-fn:round a fno:Function ;
        fno:name "round" ;
        dc:description "Rounds a value to a specified number of decimal places, rounding upwards if two such values are equally near." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "precision" ;
                fno:type "xs:integer" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:round(2.5)" ;
                fno:result "3.0" ]
            [ a fno:Test ;
                fno:expression "fn:round(2.4999)" ;
                fno:result "2.0" ]
            [ a fno:Test ;
                fno:expression "fn:round(-2.5)" ;
                fno:result "-2.0" ]
            [ a fno:Test ;
                fno:expression "fn:round(1.125, 2)" ;
                fno:result "1.13" ]
            [ a fno:Test ;
                fno:expression "fn:round(8452, -2)" ;
                fno:result "8500" ]
            [ a fno:Test ;
                fno:expression "fn:round(3.1415e0, 2)" ;
                fno:result "3.14e0" ] ) ;
        .
    
    xpath-fn:round-half-to-even a fno:Function ;
        fno:name "round-half-to-even" ;
        dc:description "Rounds a value to a specified number of decimal places, rounding to make the last digit even if two such values are equally near." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "precision" ;
                fno:type "xs:integer" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:numeric?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even(0.5)" ;
                fno:result "0.0" ]
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even(1.5)" ;
                fno:result "2.0" ]
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even(2.5)" ;
                fno:result "2.0" ]
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even(3.567812e+3, 2)" ;
                fno:result "3567.81e0" ]
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even(4.7564e-3, 2)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even(35612.25, -2)" ;
                fno:result "35600" ] ) ;
        .
    
    xpath-fn:format-integer a fno:Function ;
        fno:name "format-integer" ;
        dc:description "Formats an integer according to a given picture string, using the conventions of a given natural language if specified." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:integer?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:integer?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "lang" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "format-integer(123, \'0000\')" ;
                fno:result "\"0123\"" ]
            [ a fno:Test ;
                fno:expression "format-integer(21, \'1;o\', \'en\')" ;
                fno:result "\"21st\"" ]
            [ a fno:Test ;
                fno:expression "format-integer(7, \'a\')" ;
                fno:result "\"g\"" ]
            [ a fno:Test ;
                fno:expression "format-integer(57, \'I\')" ;
                fno:result "\"LVII\"" ]
            [ a fno:Test ;
                fno:expression "format-integer(1234, \'#;##0;\')" ;
                fno:result "\"1;234\"" ] ) ;
        .
    
    xpath-fn:format-number a fno:Function ;
        fno:name "format-number" ;
        dc:description "Returns a string containing a number formatted according to a given picture string, taking account of decimal formats specified in the static context." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:numeric?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "decimal-format-name" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "format-number(12345.6, \'#,###.00\')" ;
                fno:result "\"12,345.60\"" ]
            [ a fno:Test ;
                fno:expression "format-number(12345678.9, \'9,999.99\')" ;
                fno:result "\"12,345,678.90\"" ]
            [ a fno:Test ;
                fno:expression "format-number(123.9, \'9999\')" ;
                fno:result "\"0124\"" ]
            [ a fno:Test ;
                fno:expression "format-number(0.14, \'01%\')" ;
                fno:result "\"14%\"" ]
            [ a fno:Test ;
                fno:expression "format-number(-6, \'000\')" ;
                fno:result "\"-006\"" ]
            [ a fno:Test ;
                fno:expression "format-number(1234.5678, \'#ʹ##0·00\', \'ch\')" ;
                fno:result "\"1ʹ234·57\"" ]
            [ a fno:Test ;
                fno:expression "format-number(1234.5678, \'00.000E0\', \'fortran\')" ;
                fno:result "\"12.346E2\"" ]
            [ a fno:Test ;
                fno:expression "format-number(0.234, \'0.0E0\', \'fortran\')" ;
                fno:result "\"2.3E-1\"" ]
            [ a fno:Test ;
                fno:expression "format-number(0.234, \'#.00E0\', \'fortran\')" ;
                fno:result "\"0.23E0\"" ]
            [ a fno:Test ;
                fno:expression "format-number(0.234, \'.00E0\', \'fortran\')" ;
                fno:result "\".23E0\"" ] ) ;
        .
    
    xpath-math:pi a fno:Function ;
        fno:name "pi" ;
        dc:description "Returns an approximation to the mathematical constant π." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:double" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "2*math:pi()" ;
                fno:result "6.283185307179586e0" ] ) ;
        .
    
    xpath-math:exp a fno:Function ;
        fno:name "exp" ;
        dc:description "Returns the value of ex." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:exp(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:exp(0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:exp(1)" ;
                fno:result "2.7182818284590455e0" ]
            [ a fno:Test ;
                fno:expression "math:exp(2)" ;
                fno:result "7.38905609893065e0" ]
            [ a fno:Test ;
                fno:expression "math:exp(-1)" ;
                fno:result "0.36787944117144233e0" ]
            [ a fno:Test ;
                fno:expression "math:exp(math:pi())" ;
                fno:result "23.140692632779267e0" ]
            [ a fno:Test ;
                fno:expression "math:exp(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:exp(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:exp(xs:double(\'-INF\'))" ;
                fno:result "0.0e0" ] ) ;
        .
    
    xpath-math:exp10 a fno:Function ;
        fno:name "exp10" ;
        dc:description "Returns the value of 10x." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:exp10(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:exp10(0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:exp10(1)" ;
                fno:result "1.0e1" ]
            [ a fno:Test ;
                fno:expression "math:exp10(0.5)" ;
                fno:result "3.1622776601683795e0" ]
            [ a fno:Test ;
                fno:expression "math:exp10(-1)" ;
                fno:result "1.0e-1" ]
            [ a fno:Test ;
                fno:expression "math:exp10(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:exp10(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:exp10(xs:double(\'-INF\'))" ;
                fno:result "0.0e0" ] ) ;
        .
    
    xpath-math:log a fno:Function ;
        fno:name "log" ;
        dc:description "Returns the natural logarithm of the argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:log(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:log(0)" ;
                fno:result "xs:double(\'-INF\')" ]
            [ a fno:Test ;
                fno:expression "math:log(math:exp(1))" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:log(1.0e-3)" ;
                fno:result "-6.907755278982137e0" ]
            [ a fno:Test ;
                fno:expression "math:log(2)" ;
                fno:result "0.6931471805599453e0" ]
            [ a fno:Test ;
                fno:expression "math:log(-1)" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:log(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:log(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:log(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:log10 a fno:Function ;
        fno:name "log10" ;
        dc:description "Returns the base-ten logarithm of the argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:log10(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:log10(0)" ;
                fno:result "xs:double(\'-INF\')" ]
            [ a fno:Test ;
                fno:expression "math:log10(1.0e3)" ;
                fno:result "3.0e0" ]
            [ a fno:Test ;
                fno:expression "math:log10(1.0e-3)" ;
                fno:result "-3.0e0" ]
            [ a fno:Test ;
                fno:expression "math:log10(2)" ;
                fno:result "0.3010299956639812e0" ]
            [ a fno:Test ;
                fno:expression "math:log10(-1)" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:log10(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:log10(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:log10(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:sqrt a fno:Function ;
        fno:name "sqrt" ;
        dc:description "Returns the non-negative square root of the argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:sqrt(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(0.0e0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(-0.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(1.0e6)" ;
                fno:result "1.0e3" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(2.0e0)" ;
                fno:result "1.4142135623730951e0" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(-2.0e0)" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:sqrt(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:pow a fno:Function ;
        fno:name "pow" ;
        dc:description "Returns the result of raising the first argument to the power of the second." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "x" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "y" ;
                fno:type "xs:numeric" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:pow((), 93.7)" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:pow(2, 3)" ;
                fno:result "8.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-2, 3)" ;
                fno:result "-8.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(2, -3)" ;
                fno:result "0.125e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-2, -3)" ;
                fno:result "-0.125e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(2, 0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0, 0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(xs:double(\'INF\'), 0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(xs:double(\'NaN\'), 0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-math:pi(), 0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, 3)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, 4)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-0e0, 3)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0, 4)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, -3)" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, -4)" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(-0e0, -3)" ;
                fno:result "xs:double(\'-INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(0, -4)" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(16, 0.5e0)" ;
                fno:result "4.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(16, 0.25e0)" ;
                fno:result "2.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, -3.0e0)" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(-0e0, -3.0e0)" ;
                fno:result "xs:double(\'-INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, -3.1e0)" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(-0e0, -3.1e0)" ;
                fno:result "xs:double(\'INF\')" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, 3.0e0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-0e0, 3.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(0e0, 3.1e0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-0e0, 3.1e0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-1, xs:double(\'INF\'))" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-1, xs:double(\'-INF\'))" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(1, xs:double(\'INF\'))" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(1, xs:double(\'-INF\'))" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(1, xs:double(\'NaN\'))" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-2.5e0, 2.0e0)" ;
                fno:result "6.25e0" ]
            [ a fno:Test ;
                fno:expression "math:pow(-2.5e0, 2.00000001e0)" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:sin a fno:Function ;
        fno:name "sin" ;
        dc:description "Returns the sine of the argument. The argument is an angle in radians." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "θ" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:sin(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:sin(0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sin(-0.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sin(math:pi() div 2)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sin(-math:pi() div 2)" ;
                fno:result "-1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sin(math:pi())" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:sin(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:sin(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:sin(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:cos a fno:Function ;
        fno:name "cos" ;
        dc:description "Returns the cosine of the argument. The argument is an angle in radians." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "θ" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:cos(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:cos(0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:cos(-0.0e0)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:cos(math:pi() div 2)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:cos(-math:pi() div 2)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:cos(math:pi())" ;
                fno:result "-1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:cos(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:cos(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:cos(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:tan a fno:Function ;
        fno:name "tan" ;
        dc:description "Returns the tangent of the argument. The argument is an angle in radians." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "θ" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:tan(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:tan(0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:tan(-0.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:tan(math:pi() div 4)" ;
                fno:result "1.0e0" ]
            [ a fno:Test ;
                fno:expression "math:tan(-math:pi() div 4)" ;
                fno:result "-1.0e0" ]
            [ a fno:Test ;
                fno:expression "1 div math:tan(math:pi() div 2)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "1 div math:tan(-math:pi() div 2)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:tan(math:pi())" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:tan(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:tan(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:tan(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:asin a fno:Function ;
        fno:name "asin" ;
        dc:description "Returns the arc sine of the argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:asin(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:asin(0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:asin(-0.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:asin(1.0e0)" ;
                fno:result "1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:asin(-1.0e0)" ;
                fno:result "-1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:asin(2.0e0)" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:asin(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:asin(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:asin(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:acos a fno:Function ;
        fno:name "acos" ;
        dc:description "Returns the arc cosine of the argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:acos(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:acos(0)" ;
                fno:result "1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:acos(-0.0e0)" ;
                fno:result "1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:acos(1.0e0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:acos(-1.0e0)" ;
                fno:result "3.141592653589793e0" ]
            [ a fno:Test ;
                fno:expression "math:acos(2.0e0)" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:acos(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:acos(xs:double(\'INF\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:acos(xs:double(\'-INF\'))" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-math:atan a fno:Function ;
        fno:name "atan" ;
        dc:description "Returns the arc tangent of the argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:double?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:atan(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "math:atan(0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:atan(-0.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:atan(1.0e0)" ;
                fno:result "0.7853981633974483e0" ]
            [ a fno:Test ;
                fno:expression "math:atan(-1.0e0)" ;
                fno:result "-0.7853981633974483e0" ]
            [ a fno:Test ;
                fno:expression "math:atan(xs:double(\'NaN\'))" ;
                fno:result "xs:double(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "math:atan(xs:double(\'INF\'))" ;
                fno:result "1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:atan(xs:double(\'-INF\'))" ;
                fno:result "-1.5707963267948966e0" ] ) ;
        .
    
    xpath-math:atan2 a fno:Function ;
        fno:name "atan2" ;
        dc:description "Returns the angle in radians subtended at the origin by the point on a plane with coordinates (x, y) and the positive x-axis." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "y" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "x" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "math:atan2(+0.0e0, 0.0e0)" ;
                fno:result "0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(-0.0e0, 0.0e0)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(+0.0e0, -0.0e0)" ;
                fno:result "3.141592653589793e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(-0.0e0, -0.0e0)" ;
                fno:result "-3.141592653589793e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(-1, 0.0e0)" ;
                fno:result "-1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(+1, 0.0e0)" ;
                fno:result "1.5707963267948966e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(-0.0e0, -1)" ;
                fno:result "-3.141592653589793e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(+0.0e0, -1)" ;
                fno:result "3.141592653589793e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(-0.0e0, +1)" ;
                fno:result "-0.0e0" ]
            [ a fno:Test ;
                fno:expression "math:atan2(+0.0e0, +1)" ;
                fno:result "+0.0e0" ] ) ;
        .
    
    xpath-fn:codepoints-to-string a fno:Function ;
        fno:name "codepoints-to-string" ;
        dc:description "Returns an xs:string whose characters have supplied codepoints." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:integer*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:codepoints-to-string((66, 65, 67, 72))" ;
                fno:result "\"BACH\"" ]
            [ a fno:Test ;
                fno:expression "fn:codepoints-to-string((2309, 2358, 2378, 2325))" ;
                fno:result "\"अशॊक\"" ]
            [ a fno:Test ;
                fno:expression "fn:codepoints-to-string(())" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:codepoints-to-string(0)" ;
                fno:result "" ] ) ;
        .
    
    xpath-fn:string-to-codepoints a fno:Function ;
        fno:name "string-to-codepoints" ;
        dc:description "Returns the sequence of codepoints that constitute an xs:string value." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:string-to-codepoints(\"Thérèse\")" ;
                fno:result "(84, 104, 233, 114, 232, 115, 101)" ] ) ;
        .
    
    xpath-fn:compare a fno:Function ;
        fno:name "compare" ;
        dc:description "Returns -1, 0, or 1, depending on whether $comparand1 collates before, equal to, or after $comparand2 according to the rules of a selected collation." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "comparand1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "comparand2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "comparand1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "comparand2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:compare(\'abc\', \'abc\')" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:compare(\'Strasse\', \'Straße\')" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:compare(\'Strasse\', \'Straße\', \'http://www.w3.org/2013/collation/UCA?lang=de;strength=primary\')" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:compare(\'Strassen\', \'Straße\')" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:codepoint-equal a fno:Function ;
        fno:name "codepoint-equal" ;
        dc:description "Returns true if two strings are equal, considered codepoint-by-codepoint." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "comparand1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "comparand2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:codepoint-equal(\"abcd\", \"abcd\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:codepoint-equal(\"abcd\", \"abcd \")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:codepoint-equal(\"\", \"\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:codepoint-equal(\"\", ())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:codepoint-equal((), ())" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:concat a fno:Function ;
        fno:name "concat" ;
        dc:description "Returns the concatenation of the string values of the arguments." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:anyAtomicType?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:anyAtomicType?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "..." ;
                fno:type "xs:anyAtomicType?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:concat(\'un\', \'grateful\')" ;
                fno:result "\"ungrateful\"" ]
            [ a fno:Test ;
                fno:expression "fn:concat(\'Thy \', (), \'old \', \"groans\", \"\", \' ring\', \' yet\', \' in\', \' my\', \' ancient\',\' ears.\')" ;
                fno:result "\"Thy old groans ring yet in my ancient ears.\"" ]
            [ a fno:Test ;
                fno:expression "fn:concat(\'Ciao!\',())" ;
                fno:result "\"Ciao!\"" ]
            [ a fno:Test ;
                fno:expression "fn:concat(\'Ingratitude, \', \'thou \', \'marble-hearted\', \' fiend!\')" ;
                fno:result "\"Ingratitude, thou marble-hearted fiend!\"" ]
            [ a fno:Test ;
                fno:expression "fn:concat(01, 02, 03, 04, true())" ;
                fno:result "\"1234true\"" ]
            [ a fno:Test ;
                fno:expression "10 || \'/\' || 6" ;
                fno:result "\"10/6\"" ] ) ;
        .
    
    xpath-fn:string-join a fno:Function ;
        fno:name "string-join" ;
        dc:description "Returns a string created by concatenating the items in a sequence, with a defined separator between adjacent items." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:rules ()
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:string-join(1 to 9)" ;
                fno:result "\"123456789\"" ]
            [ a fno:Test ;
                fno:expression "fn:string-join((\'Now\', \'is\', \'the\', \'time\', \'...\'), \' \')" ;
                fno:result "\"Now is the time ...\"" ]
            [ a fno:Test ;
                fno:expression "fn:string-join((\'Blow, \', \'blow, \', \'thou \', \'winter \', \'wind!\'), \'\')" ;
                fno:result "\"Blow, blow, thou winter wind!\"" ]
            [ a fno:Test ;
                fno:expression "fn:string-join((), \'separator\')" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:string-join(1 to 5, \', \')" ;
                fno:result "\"1, 2, 3, 4, 5\"" ]
            [ a fno:Test ;
                fno:expression "$doc//@xml:id ! fn:string-join((node-name(), \'=\"\', ., \'\"\'))" ;
                fno:result "\'xml:id=\"xyz\"\'" ]
            [ a fno:Test ;
                fno:expression "$doc//section ! fn:string-join(ancestor-or-self::*/name(), \'/\')" ;
                fno:result "\"doc/chap/section\"" ] ) ;
        .
    
    xpath-fn:substring a fno:Function ;
        fno:name "substring" ;
        dc:description "Returns the portion of the value of $sourceString beginning at the position indicated by the value of $start and continuing for the number of characters indicated by the value of $length." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "sourceString" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "start" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "sourceString" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "start" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "length" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:substring(\"motor car\", 6)" ;
                fno:result "\" car\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"metadata\", 4, 3)" ;
                fno:result "\"ada\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", 1.5, 2.6)" ;
                fno:result "\"234\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", 0, 3)" ;
                fno:result "\"12\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", 5, -3)" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", -3, 5)" ;
                fno:result "\"1\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", 0 div 0E0, 3)" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", 1, 0 div 0E0)" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring((), 1, 3)" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", -42, 1 div 0E0)" ;
                fno:result "\"12345\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring(\"12345\", -1 div 0E0, 1 div 0E0)" ;
                fno:result "\"\"" ] ) ;
        .
    
    xpath-fn:string-length a fno:Function ;
        fno:name "string-length" ;
        dc:description "Returns the number of characters in a string." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:string-length(\"Harp not on that string, madam; that is past.\")" ;
                fno:result "45" ]
            [ a fno:Test ;
                fno:expression "fn:string-length(())" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:normalize-space a fno:Function ;
        fno:name "normalize-space" ;
        dc:description "Returns the value of $arg with leading and trailing whitespace removed, and sequences of internal whitespace reduced to a single space character." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:normalize-space(\" The wealthy curled darlings of our nation. \")" ;
                fno:result "\"The wealthy curled darlings of our nation.\"" ]
            [ a fno:Test ;
                fno:expression "fn:normalize-space(())" ;
                fno:result "\"\"" ] ) ;
        .
    
    xpath-fn:normalize-unicode a fno:Function ;
        fno:name "normalize-unicode" ;
        dc:description "Returns the value of $arg after applying Unicode normalization." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "normalizationForm" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:upper-case a fno:Function ;
        fno:name "upper-case" ;
        dc:description "Converts a string to upper case." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:upper-case(\"abCd0\")" ;
                fno:result "\"ABCD0\"" ] ) ;
        .
    
    xpath-fn:lower-case a fno:Function ;
        fno:name "lower-case" ;
        dc:description "Converts a string to lower case." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:lower-case(\"ABc!D\")" ;
                fno:result "\"abc!d\"" ] ) ;
        .
    
    xpath-fn:translate a fno:Function ;
        fno:name "translate" ;
        dc:description "Returns the value of $arg modified by replacing or removing individual characters." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "mapString" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "transString" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:translate(\"bar\",\"abc\",\"ABC\")" ;
                fno:result "\"BAr\"" ]
            [ a fno:Test ;
                fno:expression "fn:translate(\"--aaa--\",\"abc-\",\"ABC\")" ;
                fno:result "\"AAA\"" ]
            [ a fno:Test ;
                fno:expression "fn:translate(\"abcdabc\", \"abc\", \"AB\")" ;
                fno:result "\"ABdAB\"" ] ) ;
        .
    
    xpath-fn:encode-for-uri a fno:Function ;
        fno:name "encode-for-uri" ;
        dc:description "Encodes reserved characters in a string that is intended to be used in the path segment of a URI." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "uri-part" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:encode-for-uri(\"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean\")" ;
                fno:result "\"http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean\"" ]
            [ a fno:Test ;
                fno:expression "concat(\"http://www.example.com/\", encode-for-uri(\"~bébé\"))" ;
                fno:result "\"http://www.example.com/~b%C3%A9b%C3%A9\"" ]
            [ a fno:Test ;
                fno:expression "concat(\"http://www.example.com/\", encode-for-uri(\"100% organic\"))" ;
                fno:result "\"http://www.example.com/100%25%20organic\"" ] ) ;
        .
    
    xpath-fn:iri-to-uri a fno:Function ;
        fno:name "iri-to-uri" ;
        dc:description "Converts a string containing an IRI into a URI according to the rules of ." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "iri" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:iri-to-uri (\"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean\")" ;
                fno:result "\"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean\"" ]
            [ a fno:Test ;
                fno:expression "fn:iri-to-uri (\"http://www.example.com/~bébé\")" ;
                fno:result "\"http://www.example.com/~b%C3%A9b%C3%A9\"" ] ) ;
        .
    
    xpath-fn:escape-html-uri a fno:Function ;
        fno:name "escape-html-uri" ;
        dc:description "Escapes a URI in the same way that HTML user agents handle attribute values expected to contain URIs." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "uri" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:escape-html-uri(\"http://www.example.com/00/Weather/CA/Los Angeles#ocean\")" ;
                fno:result "\"http://www.example.com/00/Weather/CA/Los Angeles#ocean\"" ]
            [ a fno:Test ;
                fno:expression "fn:escape-html-uri(\"javascript:if (navigator.browserLanguage == \'fr\') window.open(\'http://www.example.com/~bébé\');\")" ;
                fno:result "\"javascript:if (navigator.browserLanguage == \'fr\') window.open(\'http://www.example.com/~b%C3%A9b%C3%A9\');\"" ] ) ;
        .
    
    xpath-fn:contains a fno:Function ;
        fno:name "contains" ;
        dc:description "Returns true if the string $arg1 contains $arg2 as a substring, taking collations into account." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:contains ( \"tattoo\", \"t\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains ( \"tattoo\", \"ttt\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:contains ( \"\", ())" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains ( \"abcdefghi\", \"-d-e-f-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains ( \"a*b*c*d*e*f*g*h*i*\", \"d-ef-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains ( \"abcd***e---f*--*ghi\", \"def\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains ( (), \"--***-*---\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:starts-with a fno:Function ;
        fno:name "starts-with" ;
        dc:description "Returns true if the string $arg1 contains $arg2 as a leading substring, taking collations into account." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:starts-with(\"tattoo\", \"tat\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ( \"tattoo\", \"att\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ((), ())" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ( \"abcdefghi\", \"-a-b-c-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ( \"a*b*c*d*e*f*g*h*i*\", \"a-bc-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ( \"abcd***e---f*--*ghi\", \"abcdef\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ( (), \"--***-*---\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:starts-with ( \"-abcdefghi\", \"-abc\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:ends-with a fno:Function ;
        fno:name "ends-with" ;
        dc:description "Returns true if the string $arg1 contains $arg2 as a trailing substring, taking collations into account." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:ends-with ( \"tattoo\", \"tattoo\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ( \"tattoo\", \"atto\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ((), ())" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ( \"abcdefghi\", \"-g-h-i-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ( \"abcd***e---f*--*ghi\", \"defghi\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ( \"abcd***e---f*--*ghi\", \"defghi\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ( (), \"--***-*---\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:ends-with ( \"abcdefghi\", \"ghi-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:substring-before a fno:Function ;
        fno:name "substring-before" ;
        dc:description "Returns the part of $arg1 that precedes the first occurrence of $arg2, taking collations into account." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:substring-before ( \"tattoo\", \"attoo\")" ;
                fno:result "\"t\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-before ( \"tattoo\", \"tatto\")" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-before ((), ())" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-before ( \"abcdefghi\", \"--d-e-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"abc\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-before ( \"abc--d-e-fghi\", \"--d-e-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"abc--\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-before ( \"a*b*c*d*e*f*g*h*i*\", \"***cde\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"a*b*\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-before ( \"Eureka!\", \"--***-*---\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"\"" ] ) ;
        .
    
    xpath-fn:substring-after a fno:Function ;
        fno:name "substring-after" ;
        dc:description "Returns the part of $arg1 that follows the first occurrence of $arg2, taking collations into account." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:substring-after(\"tattoo\", \"tat\")" ;
                fno:result "\"too\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-after(\"tattoo\", \"tattoo\")" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-after((), ())" ;
                fno:result "\"\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-after(\"abcdefghi\", \"--d-e-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"fghi\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-after(\"abc--d-e-fghi\", \"--d-e-\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"-fghi\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-after ( \"a*b*c*d*e*f*g*h*i*\", \"***cde***\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"*f*g*h*i*\"" ]
            [ a fno:Test ;
                fno:expression "fn:substring-after ( \"Eureka!\", \"--***-*---\", \"http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary\")" ;
                fno:result "\"Eureka!\"" ] ) ;
        .
    
    xpath-fn:matches a fno:Function ;
        fno:name "matches" ;
        dc:description "Returns true if the supplied string matches a given regular expression." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "flags" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:matches(\"abracadabra\", \"bra\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:matches(\"abracadabra\", \"^a.*a$\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:matches(\"abracadabra\", \"^bra\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:matches($poem, \"Kaum.*krähen\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:matches($poem, \"Kaum.*krähen\", \"s\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:matches($poem, \"^Kaum.*gesehen,$\", \"m\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:matches($poem, \"^Kaum.*gesehen,$\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:matches($poem, \"kiki\", \"i\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:replace a fno:Function ;
        fno:name "replace" ;
        dc:description "Returns a string produced from the input string by replacing any substrings that match a given regular expression with a supplied replacement string." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "replacement" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "replacement" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "flags" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:replace(\"abracadabra\", \"bra\", \"*\")" ;
                fno:result "\"a*cada*\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"abracadabra\", \"a.*a\", \"*\")" ;
                fno:result "\"*\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"abracadabra\", \"a.*?a\", \"*\")" ;
                fno:result "\"*c*bra\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"abracadabra\", \"a\", \"\")" ;
                fno:result "\"brcdbr\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"abracadabra\", \"a(.)\", \"a$1$1\")" ;
                fno:result "\"abbraccaddabbra\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"AAAA\", \"A+\", \"b\")" ;
                fno:result "\"b\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"AAAA\", \"A+?\", \"b\")" ;
                fno:result "\"bbbb\"" ]
            [ a fno:Test ;
                fno:expression "fn:replace(\"darted\", \"^(.*?)d(.*)$\", \"$1c$2\")" ;
                fno:result "\"carted\"" ] ) ;
        .
    
    xpath-fn:tokenize a fno:Function ;
        fno:name "tokenize" ;
        dc:description "Returns a sequence of strings constructed by splitting the input wherever a separator is found; the separator is any substring that matches a given regular expression." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "flags" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:tokenize(\" red green blue \")" ;
                fno:result "(\"red\", \"green\", \"blue\")" ]
            [ a fno:Test ;
                fno:expression "fn:tokenize(\"The cat sat on the mat\", \"\\s+\")" ;
                fno:result "(\"The\", \"cat\", \"sat\", \"on\", \"the\", \"mat\")" ]
            [ a fno:Test ;
                fno:expression "fn:tokenize(\" red green blue \", \"\\s+\")" ;
                fno:result "(\"\", \"red\", \"green\", \"blue\", \"\")" ]
            [ a fno:Test ;
                fno:expression "fn:tokenize(\"1, 15, 24, 50\", \",\\s*\")" ;
                fno:result "(\"1\", \"15\", \"24\", \"50\")" ]
            [ a fno:Test ;
                fno:expression "fn:tokenize(\"1,15,,24,50,\", \",\")" ;
                fno:result "(\"1\", \"15\", \"\", \"24\", \"50\", \"\")" ]
            [ a fno:Test ;
                fno:expression "fn:tokenize(\"Some unparsed <br> HTML <BR> text\", \"\\s*<br>\\s*\", \"i\")" ;
                fno:result "(\"Some unparsed\", \"HTML\", \"text\")" ] ) ;
        .
    
    xpath-fn:analyze-string a fno:Function ;
        fno:name "analyze-string" ;
        dc:description "Analyzes a string using a regular expression, returning an XML structure that identifies which parts of the input string matched or failed to match the regular expression, and in the case of matched substrings, which substrings matched each capturing group in the regular expression." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "pattern" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "flags" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "element(fn:analyze-string-result)" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:analyze-string(\"The cat sat on the mat.\", \"\\w+\")" ;
                fno:result "analyze-string-result xmlns=\"http://www.w3.org/2005/xpath-functions\" matchThe/match non-match /non-match matchcat/match non-match /non-match matchsat/match non-match /non-match matchon/match non-match /non-match matchthe/match non-match /non-match matchmat/match non-match./non-match /analyze-string-result" ]
            [ a fno:Test ;
                fno:expression "fn:analyze-string(\"2008-12-03\", \"^(\\d+)\\-(\\d+)\\-(\\d+)$\")" ;
                fno:result "analyze-string-result xmlns=\"http://www.w3.org/2005/xpath-functions\" matchgroup nr=\"1\"2008/group-group nr=\"2\" 12/group-group nr=\"3\"03/group/match /analyze-string-result" ]
            [ a fno:Test ;
                fno:expression "fn:analyze-string(\"A1,C15,,D24, X50,\", \"([A-Z])([0-9]+)\")" ;
                fno:result "analyze-string-result xmlns=\"http://www.w3.org/2005/xpath-functions\" matchgroup nr=\"1\"A/groupgroup nr=\"2\"1/group/match non-match,/non-match matchgroup nr=\"1\"C/groupgroup nr=\"2\"15/group/match non-match,,/non-match matchgroup nr=\"1\"D/groupgroup nr=\"2\"24/group/match non-match, /non-match matchgroup nr=\"1\"X/groupgroup nr=\"2\"50/group/match non-match,/non-match /analyze-string-result" ] ) ;
        .
    
    xpath-fn:contains-token a fno:Function ;
        fno:name "contains-token" ;
        dc:description "Determines whether or not any of the supplied strings, when tokenized at whitespace boundaries, contains the supplied token, under the rules of the supplied collation." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "token" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "token" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:contains-token(\"red green blue \", \"red\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains-token((\"red\", \"green\", \"blue\"), \" red \")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:contains-token(\"red, green, blue\", \"red\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:contains-token(\"red green blue\", \"RED\", \"http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:resolve-uri a fno:Function ;
        fno:name "resolve-uri" ;
        dc:description "Resolves a relative IRI reference against an absolute IRI." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "relative" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "relative" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "base" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:true a fno:Function ;
        fno:name "true" ;
        dc:description "Returns the xs:boolean value true." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:true()" ;
                fno:result "xs:boolean(1)" ] ) ;
        .
    
    xpath-fn:false a fno:Function ;
        fno:name "false" ;
        dc:description "Returns the xs:boolean value false." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:false()" ;
                fno:result "xs:boolean(0)" ] ) ;
        .
    
    xpath-op:boolean-equal a fno:Function ;
        fno:name "boolean-equal" ;
        dc:description "Returns true if the two arguments are the same boolean value." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value1" ;
                fno:type "xs:boolean" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value2" ;
                fno:type "xs:boolean" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:boolean-less-than a fno:Function ;
        fno:name "boolean-less-than" ;
        dc:description "Returns true if the first argument is false and the second is true." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:boolean" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:boolean" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:boolean-greater-than a fno:Function ;
        fno:name "boolean-greater-than" ;
        dc:description "Returns true if the first argument is true and the second is false." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:boolean" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:boolean" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:boolean a fno:Function ;
        fno:name "boolean" ;
        dc:description "Computes the effective boolean value of the sequence $arg." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:boolean($abc[1])" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:boolean($abc[0])" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:boolean($abc[3])" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-fn:not a fno:Function ;
        fno:name "not" ;
        dc:description "Returns true if the effective boolean value of $arg is false, or false if it is true." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:not(fn:true())" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:not(())" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:not(\"false\")" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:yearMonthDuration-less-than a fno:Function ;
        fno:name "yearMonthDuration-less-than" ;
        dc:description "Returns true if $arg1 is a shorter duration than $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:yearMonthDuration-greater-than a fno:Function ;
        fno:name "yearMonthDuration-greater-than" ;
        dc:description "Returns true if $arg1 is a longer duration than $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:dayTimeDuration-less-than a fno:Function ;
        fno:name "dayTimeDuration-less-than" ;
        dc:description "Returns true if $arg1 is a shorter duration than $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:dayTimeDuration-greater-than a fno:Function ;
        fno:name "dayTimeDuration-greater-than" ;
        dc:description "Returns true if $arg1 is a longer duration than $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:duration-equal a fno:Function ;
        fno:name "duration-equal" ;
        dc:description "Returns true if $arg1 and $arg2 are durations of the same length." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:duration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:duration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:duration(\"P1Y\"), xs:duration(\"P12M\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:duration(\"PT24H\"), xs:duration(\"P1D\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:duration(\"P1Y\"), xs:duration(\"P365D\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:yearMonthDuration(\"P0Y\"), xs:dayTimeDuration(\"P0D\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:yearMonthDuration(\"P1Y\"), xs:dayTimeDuration(\"P365D\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:yearMonthDuration(\"P2Y\"), xs:yearMonthDuration(\"P24M\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:dayTimeDuration(\"P10D\"), xs:dayTimeDuration(\"PT240H\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:duration(\"P2Y0M0DT0H0M0S\"), xs:yearMonthDuration(\"P24M\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:duration-equal(xs:duration(\"P0Y0M10D\"), xs:dayTimeDuration(\"PT240H\"))" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:years-from-duration a fno:Function ;
        fno:name "years-from-duration" ;
        dc:description "Returns the number of years in a duration." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:duration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:years-from-duration(xs:yearMonthDuration(\"P20Y15M\"))" ;
                fno:result "21" ]
            [ a fno:Test ;
                fno:expression "fn:years-from-duration(xs:yearMonthDuration(\"-P15M\"))" ;
                fno:result "-1" ]
            [ a fno:Test ;
                fno:expression "fn:years-from-duration(xs:dayTimeDuration(\"-P2DT15H\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:months-from-duration a fno:Function ;
        fno:name "months-from-duration" ;
        dc:description "Returns the number of months in a duration." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:duration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:months-from-duration(xs:yearMonthDuration(\"P20Y15M\"))" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "fn:months-from-duration(xs:yearMonthDuration(\"-P20Y18M\"))" ;
                fno:result "-6" ]
            [ a fno:Test ;
                fno:expression "fn:months-from-duration(xs:dayTimeDuration(\"-P2DT15H0M0S\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:days-from-duration a fno:Function ;
        fno:name "days-from-duration" ;
        dc:description "Returns the number of days in a duration." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:duration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:days-from-duration(xs:dayTimeDuration(\"P3DT10H\"))" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "fn:days-from-duration(xs:dayTimeDuration(\"P3DT55H\"))" ;
                fno:result "5" ]
            [ a fno:Test ;
                fno:expression "fn:days-from-duration(xs:yearMonthDuration(\"P3Y5M\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:hours-from-duration a fno:Function ;
        fno:name "hours-from-duration" ;
        dc:description "Returns the number of hours in a duration." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:duration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:hours-from-duration(xs:dayTimeDuration(\"P3DT10H\"))" ;
                fno:result "10" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-duration(xs:dayTimeDuration(\"P3DT12H32M12S\"))" ;
                fno:result "12" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-duration(xs:dayTimeDuration(\"PT123H\"))" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-duration(xs:dayTimeDuration(\"-P3DT10H\"))" ;
                fno:result "-10" ] ) ;
        .
    
    xpath-fn:minutes-from-duration a fno:Function ;
        fno:name "minutes-from-duration" ;
        dc:description "Returns the number of minutes in a duration." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:duration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:minutes-from-duration(xs:dayTimeDuration(\"P3DT10H\"))" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:minutes-from-duration(xs:dayTimeDuration(\"-P5DT12H30M\"))" ;
                fno:result "-30" ] ) ;
        .
    
    xpath-fn:seconds-from-duration a fno:Function ;
        fno:name "seconds-from-duration" ;
        dc:description "Returns the number of seconds in a duration." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:duration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:decimal?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:seconds-from-duration(xs:dayTimeDuration(\"P3DT10H12.5S\"))" ;
                fno:result "12.5" ]
            [ a fno:Test ;
                fno:expression "fn:seconds-from-duration(xs:dayTimeDuration(\"-PT256S\"))" ;
                fno:result "-16.0" ] ) ;
        .
    
    xpath-op:add-yearMonthDurations a fno:Function ;
        fno:name "add-yearMonthDurations" ;
        dc:description "Returns the result of adding two xs:yearMonthDuration values." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:yearMonthDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-yearMonthDurations(xs:yearMonthDuration(\"P2Y11M\"), xs:yearMonthDuration(\"P3Y3M\"))" ;
                fno:result "xs:yearMonthDuration(\"P6Y2M\")" ] ) ;
        .
    
    xpath-op:subtract-yearMonthDurations a fno:Function ;
        fno:name "subtract-yearMonthDurations" ;
        dc:description "Returns the result of subtracting one xs:yearMonthDuration value from another." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:yearMonthDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-yearMonthDurations(xs:yearMonthDuration(\"P2Y11M\"), xs:yearMonthDuration(\"P3Y3M\"))" ;
                fno:result "xs:yearMonthDuration(\"-P4M\")" ] ) ;
        .
    
    xpath-op:multiply-yearMonthDuration a fno:Function ;
        fno:name "multiply-yearMonthDuration" ;
        dc:description "Returns the result of multiplying the value of $arg1 by $arg2. The result is rounded to the nearest month." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:yearMonthDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:multiply-yearMonthDuration(xs:yearMonthDuration(\"P2Y11M\"), 2.3)" ;
                fno:result "xs:yearMonthDuration(\"P6Y9M\")" ] ) ;
        .
    
    xpath-op:divide-yearMonthDuration a fno:Function ;
        fno:name "divide-yearMonthDuration" ;
        dc:description "Returns the result of dividing the value of $arg1 by $arg2. The result is rounded to the nearest month." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:yearMonthDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:divide-yearMonthDuration(xs:yearMonthDuration(\"P2Y11M\"), 1.5)" ;
                fno:result "xs:yearMonthDuration(\"P1Y11M\")" ] ) ;
        .
    
    xpath-op:divide-yearMonthDuration-by-yearMonthDuration a fno:Function ;
        fno:name "divide-yearMonthDuration-by-yearMonthDuration" ;
        dc:description "Returns the ratio of two xs:yearMonthDuration values." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:decimal" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration(\"P3Y4M\"), xs:yearMonthDuration(\"-P1Y4M\"))" ;
                fno:result "-2.5" ]
            [ a fno:Test ;
                fno:expression "op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration(\"P3Y4M\"), xs:yearMonthDuration(\"P1M\"))" ;
                fno:result "40" ] ) ;
        .
    
    xpath-op:add-dayTimeDurations a fno:Function ;
        fno:name "add-dayTimeDurations" ;
        dc:description "Returns the sum of two xs:dayTimeDuration values." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-dayTimeDurations(xs:dayTimeDuration(\"P2DT12H5M\"), xs:dayTimeDuration(\"P5DT12H\"))" ;
                fno:result "xs:dayTimeDuration(\'P8DT5M\')" ] ) ;
        .
    
    xpath-op:subtract-dayTimeDurations a fno:Function ;
        fno:name "subtract-dayTimeDurations" ;
        dc:description "Returns the result of subtracting one xs:dayTimeDuration from another." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-dayTimeDurations(xs:dayTimeDuration(\"P2DT12H\"), xs:dayTimeDuration(\"P1DT10H30M\"))" ;
                fno:result "xs:dayTimeDuration(\'P1DT1H30M\')" ] ) ;
        .
    
    xpath-op:multiply-dayTimeDuration a fno:Function ;
        fno:name "multiply-dayTimeDuration" ;
        dc:description "Returns the result of multiplying a xs:dayTimeDuration by a number." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:multiply-dayTimeDuration(xs:dayTimeDuration(\"PT2H10M\"), 2.1)" ;
                fno:result "xs:dayTimeDuration(\'PT4H33M\')" ] ) ;
        .
    
    xpath-op:divide-dayTimeDuration a fno:Function ;
        fno:name "divide-dayTimeDuration" ;
        dc:description "Returns the result of multiplying a xs:dayTimeDuration by a number." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:divide-dayTimeDuration(xs:dayTimeDuration(\"P1DT2H30M10.5S\"), 1.5)" ;
                fno:result "xs:duration(\"PT17H40M7S\")" ] ) ;
        .
    
    xpath-op:divide-dayTimeDuration-by-dayTimeDuration a fno:Function ;
        fno:name "divide-dayTimeDuration-by-dayTimeDuration" ;
        dc:description "Returns the ratio of two xs:dayTimeDuration values, as a decimal number." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:decimal" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:round-half-to-even( op:divide-dayTimeDuration-by-dayTimeDuration( xs:dayTimeDuration(\"P2DT53M11S\"), xs:dayTimeDuration(\"P1DT10H\")), 4)" ;
                fno:result "1.4378" ]
            [ a fno:Test ;
                fno:expression "op:divide-dayTimeDuration-by-dayTimeDuration(xs:dayTimeDuration(\"P2DT53M11S\"), xs:dayTimeDuration(\"PT1S\"))" ;
                fno:result "175991.0" ] ) ;
        .
    
    xpath-fn:dateTime a fno:Function ;
        fno:name "dateTime" ;
        dc:description "Returns an xs:dateTime value created by combining an xs:date and an xs:time." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:dateTime(xs:date(\"1999-12-31\"), xs:time(\"12:00:00\"))" ;
                fno:result "xs:dateTime(\"1999-12-31T12:00:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:dateTime(xs:date(\"1999-12-31\"), xs:time(\"24:00:00\"))" ;
                fno:result "xs:dateTime(\"1999-12-31T00:00:00\")" ] ) ;
        .
    
    xpath-op:dateTime-equal a fno:Function ;
        fno:name "dateTime-equal" ;
        dc:description "Returns true if the two supplied xs:dateTime values refer to the same instant in time." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00-01:00\"), xs:dateTime(\"2002-04-02T17:00:00+04:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00\"), xs:dateTime(\"2002-04-02T23:00:00+06:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00\"), xs:dateTime(\"2002-04-02T17:00:00\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00\"), xs:dateTime(\"2002-04-02T12:00:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"2002-04-02T23:00:00-04:00\"), xs:dateTime(\"2002-04-03T02:00:00-01:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"1999-12-31T24:00:00\"), xs:dateTime(\"2000-01-01T00:00:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:dateTime-equal(xs:dateTime(\"2005-04-04T24:00:00\"), xs:dateTime(\"2005-04-04T00:00:00\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:dateTime-less-than a fno:Function ;
        fno:name "dateTime-less-than" ;
        dc:description "Returns true if the first argument represents an earlier instant in time than the second argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:dateTime-greater-than a fno:Function ;
        fno:name "dateTime-greater-than" ;
        dc:description "Returns true if the first argument represents a later instant in time than the second argument." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:date-equal a fno:Function ;
        fno:name "date-equal" ;
        dc:description "Returns true if and only if the starting instants of the two supplied xs:date values are the same." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:date-equal(xs:date(\"2004-12-25Z\"), xs:date(\"2004-12-25+07:00\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:date-equal(xs:date(\"2004-12-25-12:00\"), xs:date(\"2004-12-26+12:00\"))" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-op:date-less-than a fno:Function ;
        fno:name "date-less-than" ;
        dc:description "Returns true if and only if the starting instant of $arg1 is less than the starting instant of $arg2. Returns false otherwise." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:date-less-than(xs:date(\"2004-12-25Z\"), xs:date(\"2004-12-25-05:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:date-less-than(xs:date(\"2004-12-25-12:00\"), xs:date(\"2004-12-26+12:00\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:date-greater-than a fno:Function ;
        fno:name "date-greater-than" ;
        dc:description "Returns true if and only if the starting instant of $arg1 is greater than the starting instant of $arg2. Returns false otherwise." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:date-greater-than(xs:date(\"2004-12-25Z\"), xs:date(\"2004-12-25+07:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:date-greater-than(xs:date(\"2004-12-25-12:00\"), xs:date(\"2004-12-26+12:00\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:time-equal a fno:Function ;
        fno:name "time-equal" ;
        dc:description "Returns true if the two xs:time values represent the same instant in time, when treated as being times on the same date, before adjusting the timezone." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:time-equal(xs:time(\"08:00:00+09:00\"), xs:time(\"17:00:00-06:00\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:time-equal(xs:time(\"21:30:00+10:30\"), xs:time(\"06:00:00-05:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:time-equal(xs:time(\"24:00:00+01:00\"), xs:time(\"00:00:00+01:00\"))" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-op:time-less-than a fno:Function ;
        fno:name "time-less-than" ;
        dc:description "Returns true if the first xs:time value represents an earlier instant in time than the second, when both are treated as being times on the same date, before adjusting the timezone." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:time-less-than(xs:time(\"12:00:00\"), xs:time(\"23:00:00+06:00\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:time-less-than(xs:time(\"11:00:00\"), xs:time(\"17:00:00Z\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:time-less-than(xs:time(\"23:59:59\"), xs:time(\"24:00:00\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:time-greater-than a fno:Function ;
        fno:name "time-greater-than" ;
        dc:description "Returns true if the first xs:time value represents a later instant in time than the second, when both are treated as being times on the same date, before adjusting the timezone." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:time-greater-than(xs:time(\"08:00:00+09:00\"), xs:time(\"17:00:00-06:00\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:gYearMonth-equal a fno:Function ;
        fno:name "gYearMonth-equal" ;
        dc:description "Returns true if the two xs:gYearMonth values have the same starting instant." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:gYearMonth" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:gYearMonth" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:gYear-equal a fno:Function ;
        fno:name "gYear-equal" ;
        dc:description "Returns true if the two xs:gYear values have the same starting instant." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:gYear" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:gYear" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:gYear-equal(xs:gYear(\"1976-05:00\"), xs:gYear(\"1976\"))" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-op:gMonthDay-equal a fno:Function ;
        fno:name "gMonthDay-equal" ;
        dc:description "Returns true if the two xs:gMonthDay values have the same starting instant, when considered as days in the same year." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:gMonthDay" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:gMonthDay" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:gMonthDay-equal(xs:gMonthDay(\"--12-25-14:00\"), xs:gMonthDay(\"--12-26+10:00\"))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "op:gMonthDay-equal(xs:gMonthDay(\"--12-25\"), xs:gMonthDay(\"--12-26Z\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:gMonth-equal a fno:Function ;
        fno:name "gMonth-equal" ;
        dc:description "Returns true if the two xs:gMonth values have the same starting instant, when considered as months in the same year." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:gMonth" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:gMonth" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:gMonth-equal(xs:gMonth(\"--12-14:00\"), xs:gMonth(\"--12+10:00\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:gMonth-equal(xs:gMonth(\"--12\"), xs:gMonth(\"--12Z\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-op:gDay-equal a fno:Function ;
        fno:name "gDay-equal" ;
        dc:description "Returns true if the two xs:gDay values have the same starting instant, when considered as days in the same month of the same year." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:gDay" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:gDay" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:gDay-equal(xs:gDay(\"---25-14:00\"), xs:gDay(\"---25+10:00\"))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "op:gDay-equal(xs:gDay(\"---12\"), xs:gDay(\"---12Z\"))" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-fn:year-from-dateTime a fno:Function ;
        fno:name "year-from-dateTime" ;
        dc:description "Returns the year component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:year-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))" ;
                fno:result "1999" ]
            [ a fno:Test ;
                fno:expression "fn:year-from-dateTime(xs:dateTime(\"1999-05-31T21:30:00-05:00\"))" ;
                fno:result "1999" ]
            [ a fno:Test ;
                fno:expression "fn:year-from-dateTime(xs:dateTime(\"1999-12-31T19:20:00\"))" ;
                fno:result "1999" ]
            [ a fno:Test ;
                fno:expression "fn:year-from-dateTime(xs:dateTime(\"1999-12-31T24:00:00\"))" ;
                fno:result "2000" ]
            [ a fno:Test ;
                fno:expression "fn:year-from-dateTime(xs:dateTime(\"-0002-06-06T00:00:00\"))" ;
                fno:result "-2" ] ) ;
        .
    
    xpath-fn:month-from-dateTime a fno:Function ;
        fno:name "month-from-dateTime" ;
        dc:description "Returns the month component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:month-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))" ;
                fno:result "5" ]
            [ a fno:Test ;
                fno:expression "fn:month-from-dateTime(xs:dateTime(\"1999-12-31T19:20:00-05:00\"))" ;
                fno:result "12" ]
            [ a fno:Test ;
                fno:expression "fn:month-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(\"1999-12-31T19:20:00-05:00\"), xs:dayTimeDuration(\"PT0S\")))" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:day-from-dateTime a fno:Function ;
        fno:name "day-from-dateTime" ;
        dc:description "Returns the day component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:day-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))" ;
                fno:result "31" ]
            [ a fno:Test ;
                fno:expression "fn:day-from-dateTime(xs:dateTime(\"1999-12-31T20:00:00-05:00\"))" ;
                fno:result "31" ]
            [ a fno:Test ;
                fno:expression "fn:day-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(\"1999-12-31T19:20:00-05:00\"), xs:dayTimeDuration(\"PT0S\")))" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:hours-from-dateTime a fno:Function ;
        fno:name "hours-from-dateTime" ;
        dc:description "Returns the hours component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:hours-from-dateTime(xs:dateTime(\"1999-05-31T08:20:00-05:00\"))" ;
                fno:result "8" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-dateTime(xs:dateTime(\"1999-12-31T21:20:00-05:00\"))" ;
                fno:result "21" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(\"1999-12-31T21:20:00-05:00\"), xs:dayTimeDuration(\"PT0S\")))" ;
                fno:result "2" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-dateTime(xs:dateTime(\"1999-12-31T12:00:00\"))" ;
                fno:result "12" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-dateTime(xs:dateTime(\"1999-12-31T24:00:00\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:minutes-from-dateTime a fno:Function ;
        fno:name "minutes-from-dateTime" ;
        dc:description "Returns the minute component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))" ;
                fno:result "20" ]
            [ a fno:Test ;
                fno:expression "fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:30:00+05:30\"))" ;
                fno:result "30" ] ) ;
        .
    
    xpath-fn:seconds-from-dateTime a fno:Function ;
        fno:name "seconds-from-dateTime" ;
        dc:description "Returns the seconds component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:decimal?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:seconds-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:timezone-from-dateTime a fno:Function ;
        fno:name "timezone-from-dateTime" ;
        dc:description "Returns the timezone component of an xs:dateTime." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:timezone-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))" ;
                fno:result "xs:dayTimeDuration(\"-PT5H\")" ]
            [ a fno:Test ;
                fno:expression "fn:timezone-from-dateTime(xs:dateTime(\"2000-06-12T13:20:00Z\"))" ;
                fno:result "xs:dayTimeDuration(\"PT0S\")" ]
            [ a fno:Test ;
                fno:expression "fn:timezone-from-dateTime(xs:dateTime(\"2004-08-27T00:00:00\"))" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:year-from-date a fno:Function ;
        fno:name "year-from-date" ;
        dc:description "Returns the year component of an xs:date." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:year-from-date(xs:date(\"1999-05-31\"))" ;
                fno:result "1999" ]
            [ a fno:Test ;
                fno:expression "fn:year-from-date(xs:date(\"2000-01-01+05:00\"))" ;
                fno:result "2000" ]
            [ a fno:Test ;
                fno:expression "fn:year-from-date(xs:date(\"-0002-06-01\"))" ;
                fno:result "-2" ] ) ;
        .
    
    xpath-fn:month-from-date a fno:Function ;
        fno:name "month-from-date" ;
        dc:description "Returns the month component of an xs:date." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:month-from-date(xs:date(\"1999-05-31-05:00\"))" ;
                fno:result "5" ]
            [ a fno:Test ;
                fno:expression "fn:month-from-date(xs:date(\"2000-01-01+05:00\"))" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:day-from-date a fno:Function ;
        fno:name "day-from-date" ;
        dc:description "Returns the day component of an xs:date." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:day-from-date(xs:date(\"1999-05-31-05:00\"))" ;
                fno:result "31" ]
            [ a fno:Test ;
                fno:expression "fn:day-from-date(xs:date(\"2000-01-01+05:00\"))" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:timezone-from-date a fno:Function ;
        fno:name "timezone-from-date" ;
        dc:description "Returns the timezone component of an xs:date." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:timezone-from-date(xs:date(\"1999-05-31-05:00\"))" ;
                fno:result "xs:dayTimeDuration(\"-PT5H\")" ]
            [ a fno:Test ;
                fno:expression "fn:timezone-from-date(xs:date(\"2000-06-12Z\"))" ;
                fno:result "xs:dayTimeDuration(\"PT0S\")" ] ) ;
        .
    
    xpath-fn:hours-from-time a fno:Function ;
        fno:name "hours-from-time" ;
        dc:description "Returns the hours component of an xs:time." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:hours-from-time(xs:time(\"11:23:00\"))" ;
                fno:result "11" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-time(xs:time(\"21:23:00\"))" ;
                fno:result "21" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-time(xs:time(\"01:23:00+05:00\"))" ;
                fno:result "1" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-time(fn:adjust-time-to-timezone(xs:time(\"01:23:00+05:00\"), xs:dayTimeDuration(\"PT0S\")))" ;
                fno:result "20" ]
            [ a fno:Test ;
                fno:expression "fn:hours-from-time(xs:time(\"24:00:00\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:minutes-from-time a fno:Function ;
        fno:name "minutes-from-time" ;
        dc:description "Returns the minutes component of an xs:time." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:minutes-from-time(xs:time(\"13:00:00Z\"))" ;
                fno:result "0" ] ) ;
        .
    
    xpath-fn:seconds-from-time a fno:Function ;
        fno:name "seconds-from-time" ;
        dc:description "Returns the seconds component of an xs:time." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:decimal?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:seconds-from-time(xs:time(\"13:20:10.5\"))" ;
                fno:result "10.5" ] ) ;
        .
    
    xpath-fn:timezone-from-time a fno:Function ;
        fno:name "timezone-from-time" ;
        dc:description "Returns the timezone component of an xs:time." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:timezone-from-time(xs:time(\"13:20:00-05:00\"))" ;
                fno:result "xs:dayTimeDuration(\"-PT5H\")" ]
            [ a fno:Test ;
                fno:expression "fn:timezone-from-time(xs:time(\"13:20:00\"))" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:adjust-dateTime-to-timezone a fno:Function ;
        fno:name "adjust-dateTime-to-timezone" ;
        dc:description "Adjusts an xs:dateTime value to a specific timezone, or to no timezone at all." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "timezone" ;
                fno:type "xs:dayTimeDuration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00\'))" ;
                fno:result "xs:dateTime(\'2002-03-07T10:00:00-05:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00-07:00\'))" ;
                fno:result "xs:dateTime(\'2002-03-07T12:00:00-05:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00\'), $tz-10)" ;
                fno:result "xs:dateTime(\'2002-03-07T10:00:00-10:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00-07:00\'), $tz-10)" ;
                fno:result "xs:dateTime(\'2002-03-07T07:00:00-10:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00-07:00\'), xs:dayTimeDuration(\"PT10H\"))" ;
                fno:result "xs:dateTime(\'2002-03-08T03:00:00+10:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T00:00:00+01:00\'), xs:dayTimeDuration(\"-PT8H\"))" ;
                fno:result "xs:dateTime(\'2002-03-06T15:00:00-08:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00\'), ())" ;
                fno:result "xs:dateTime(\'2002-03-07T10:00:00\')" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-dateTime-to-timezone(xs:dateTime(\'2002-03-07T10:00:00-07:00\'), ())" ;
                fno:result "xs:dateTime(\'2002-03-07T10:00:00\')" ] ) ;
        .
    
    xpath-fn:adjust-date-to-timezone a fno:Function ;
        fno:name "adjust-date-to-timezone" ;
        dc:description "Adjusts an xs:date value to a specific timezone, or to no timezone at all; the result is the date in the target timezone that contains the starting instant of the supplied date." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "timezone" ;
                fno:type "xs:dayTimeDuration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:date?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:adjust-date-to-timezone(xs:date(\"2002-03-07\"))" ;
                fno:result "xs:date(\"2002-03-07-05:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-date-to-timezone(xs:date(\"2002-03-07-07:00\"))" ;
                fno:result "xs:date(\"2002-03-07-05:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-date-to-timezone(xs:date(\"2002-03-07\"), $tz-10)" ;
                fno:result "xs:date(\"2002-03-07-10:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-date-to-timezone(xs:date(\"2002-03-07-07:00\"), $tz-10)" ;
                fno:result "xs:date(\"2002-03-06-10:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-date-to-timezone(xs:date(\"2002-03-07\"), ())" ;
                fno:result "xs:date(\"2002-03-07\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-date-to-timezone(xs:date(\"2002-03-07-07:00\"), ())" ;
                fno:result "xs:date(\"2002-03-07\")" ] ) ;
        .
    
    xpath-fn:adjust-time-to-timezone a fno:Function ;
        fno:name "adjust-time-to-timezone" ;
        dc:description "Adjusts an xs:time value to a specific timezone, or to no timezone at all." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "timezone" ;
                fno:type "xs:dayTimeDuration?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:time?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00\"))" ;
                fno:result "xs:time(\"10:00:00-05:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"))" ;
                fno:result "xs:time(\"12:00:00-05:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00\"), $tz-10)" ;
                fno:result "xs:time(\"10:00:00-10:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"), $tz-10)" ;
                fno:result "xs:time(\"07:00:00-10:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00\"), ())" ;
                fno:result "xs:time(\"10:00:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"), ())" ;
                fno:result "xs:time(\"10:00:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"), xs:dayTimeDuration(\"PT10H\"))" ;
                fno:result "xs:time(\"03:00:00+10:00\")" ] ) ;
        .
    
    xpath-op:subtract-dateTimes a fno:Function ;
        fno:name "subtract-dateTimes" ;
        dc:description "Returns an xs:dayTimeDuration representing the amount of elapsed time between the instants arg2 and arg1." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-dateTimes(xs:dateTime(\"2000-10-30T06:12:00\"), xs:dateTime(\"1999-11-28T09:00:00Z\"))" ;
                fno:result "xs:dayTimeDuration(\"P337DT2H12M\")" ] ) ;
        .
    
    xpath-op:subtract-dates a fno:Function ;
        fno:name "subtract-dates" ;
        dc:description "Returns the xs:dayTimeDuration that corresponds to the elapsed time between the starting instant of $arg2 and the starting instant of $arg2." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-dates(xs:date(\"2000-10-30\"), xs:date(\"1999-11-28\"))" ;
                fno:result "xs:dayTimeDuration(\"P337D\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-dates(xs:date(\"2000-10-30\"), xs:date(\"1999-11-28Z\"))" ;
                fno:result "xs:dayTimeDuration(\"P336DT19H\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-dates(xs:date(\"2000-10-15-05:00\"), xs:date(\"2000-10-10+02:00\"))" ;
                fno:result "xs:dayTimeDuration(\"P5DT7H\")" ] ) ;
        .
    
    xpath-op:subtract-times a fno:Function ;
        fno:name "subtract-times" ;
        dc:description "Returns the xs:dayTimeDuration that corresponds to the elapsed time between the values of $arg2 and $arg1 treated as times on the same date." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-times(xs:time(\"11:12:00Z\"), xs:time(\"04:00:00\"))" ;
                fno:result "xs:dayTimeDuration(\"PT2H12M\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-times(xs:time(\"11:00:00-05:00\"), xs:time(\"21:30:00+05:30\"))" ;
                fno:result "xs:dayTimeDuration(\"PT0S\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-times(xs:time(\"17:00:00-06:00\"), xs:time(\"08:00:00+09:00\"))" ;
                fno:result "xs:dayTimeDuration(\"P1D\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-times(xs:time(\"24:00:00\"), xs:time(\"23:59:59\"))" ;
                fno:result "xs:dayTimeDuration(\"-PT23H59M59S\")" ] ) ;
        .
    
    xpath-op:add-yearMonthDuration-to-dateTime a fno:Function ;
        fno:name "add-yearMonthDuration-to-dateTime" ;
        dc:description "Returns the xs:dateTime that is a given duration after a specified xs:dateTime (or before, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-yearMonthDuration-to-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"), xs:yearMonthDuration(\"P1Y2M\"))" ;
                fno:result "xs:dateTime(\"2001-12-30T11:12:00\")" ] ) ;
        .
    
    xpath-op:add-dayTimeDuration-to-dateTime a fno:Function ;
        fno:name "add-dayTimeDuration-to-dateTime" ;
        dc:description "Returns the xs:dateTime that is a given duration after a specified xs:dateTime (or before, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-dayTimeDuration-to-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"), xs:dayTimeDuration(\"P3DT1H15M\"))" ;
                fno:result "xs:dateTime(\"2000-11-02T12:27:00\")" ] ) ;
        .
    
    xpath-op:subtract-yearMonthDuration-from-dateTime a fno:Function ;
        fno:name "subtract-yearMonthDuration-from-dateTime" ;
        dc:description "Returns the xs:dateTime that is a given duration before a specified xs:dateTime (or after, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-yearMonthDuration-from-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"), xs:yearMonthDuration(\"P1Y2M\"))" ;
                fno:result "xs:dateTime(\"1999-08-30T11:12:00\")" ] ) ;
        .
    
    xpath-op:subtract-dayTimeDuration-from-dateTime a fno:Function ;
        fno:name "subtract-dayTimeDuration-from-dateTime" ;
        dc:description "Returns the xs:dateTime that is a given duration before a specified xs:dateTime (or after, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:dateTime" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-dayTimeDuration-from-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"), xs:dayTimeDuration(\"P3DT1H15M\"))" ;
                fno:result "xs:dateTime(\"2000-10-27T09:57:00\")" ] ) ;
        .
    
    xpath-op:add-yearMonthDuration-to-date a fno:Function ;
        fno:name "add-yearMonthDuration-to-date" ;
        dc:description "Returns the xs:date that is a given duration after a specified xs:date (or before, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:date" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-yearMonthDuration-to-date(xs:date(\"2000-10-30\"), xs:yearMonthDuration(\"P1Y2M\"))" ;
                fno:result "xs:date(\"2001-12-30\")" ] ) ;
        .
    
    xpath-op:add-dayTimeDuration-to-date a fno:Function ;
        fno:name "add-dayTimeDuration-to-date" ;
        dc:description "Returns the xs:date that is a given duration after a specified xs:date (or before, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:date" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-dayTimeDuration-to-date(xs:date(\"2004-10-30Z\"), xs:dayTimeDuration(\"P2DT2H30M0S\"))" ;
                fno:result "xs:date(\"2004-11-01Z\")" ] ) ;
        .
    
    xpath-op:subtract-yearMonthDuration-from-date a fno:Function ;
        fno:name "subtract-yearMonthDuration-from-date" ;
        dc:description "Returns the xs:date that is a given duration before a specified xs:date (or after, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:yearMonthDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:date" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-yearMonthDuration-from-date(xs:date(\"2000-10-30\"), xs:yearMonthDuration(\"P1Y2M\"))" ;
                fno:result "xs:date(\"1999-08-30\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-yearMonthDuration-from-date(xs:date(\"2000-02-29Z\"), xs:yearMonthDuration(\"P1Y\"))" ;
                fno:result "xs:date(\"1999-02-28Z\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-yearMonthDuration-from-date(xs:date(\"2000-10-31-05:00\"), xs:yearMonthDuration(\"P1Y1M\"))" ;
                fno:result "xs:date(\"1999-09-30-05:00\")" ] ) ;
        .
    
    xpath-op:subtract-dayTimeDuration-from-date a fno:Function ;
        fno:name "subtract-dayTimeDuration-from-date" ;
        dc:description "Returns the xs:date that is a given duration before a specified xs:date (or after, if the duration is negative)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:date" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:date" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-dayTimeDuration-from-date(xs:date(\"2000-10-30\"), xs:dayTimeDuration(\"P3DT1H15M\"))" ;
                fno:result "xs:date(\"2000-10-26\")" ] ) ;
        .
    
    xpath-op:add-dayTimeDuration-to-time a fno:Function ;
        fno:name "add-dayTimeDuration-to-time" ;
        dc:description "Returns the xs:time value that is a given duration after a specified xs:time (or before, if the duration is negative or causes wrap-around past midnight)" ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:time" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:add-dayTimeDuration-to-time(xs:time(\"11:12:00\"), xs:dayTimeDuration(\"P3DT1H15M\"))" ;
                fno:result "xs:time(\"12:27:00\")" ]
            [ a fno:Test ;
                fno:expression "op:add-dayTimeDuration-to-time(xs:time(\"23:12:00+03:00\"), xs:dayTimeDuration(\"P1DT3H15M\"))" ;
                fno:result "xs:time(\"02:27:00+03:00\")" ] ) ;
        .
    
    xpath-op:subtract-dayTimeDuration-from-time a fno:Function ;
        fno:name "subtract-dayTimeDuration-from-time" ;
        dc:description "Returns the xs:time value that is a given duration before a specified xs:time (or after, if the duration is negative or causes wrap-around past midnight)" ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:time" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:dayTimeDuration" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:time" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "op:subtract-dayTimeDuration-from-time(xs:time(\"11:12:00\"), xs:dayTimeDuration(\"P3DT1H15M\"))" ;
                fno:result "xs:time(\"09:57:00\")" ]
            [ a fno:Test ;
                fno:expression "op:subtract-dayTimeDuration-from-time(xs:time(\"08:20:00-05:00\"), xs:dayTimeDuration(\"P23DT10H10M\"))" ;
                fno:result "xs:time(\"22:10:00-05:00\")" ] ) ;
        .
    
    xpath-fn:format-dateTime a fno:Function ;
        fno:name "format-dateTime" ;
        dc:description "Returns a string containing an xs:dateTime value formatted for display." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:dateTime?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "language" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "calendar" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "place" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:format-date a fno:Function ;
        fno:name "format-date" ;
        dc:description "Returns a string containing an xs:date value formatted for display." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:date?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "language" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "calendar" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "place" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:format-time a fno:Function ;
        fno:name "format-time" ;
        dc:description "Returns a string containing an xs:time value formatted for display." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:time?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "picture" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "language" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "calendar" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "place" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:parse-ietf-date a fno:Function ;
        fno:name "parse-ietf-date" ;
        dc:description "Parses a string containing the date and time in IETF format, returning the corresponding xs:dateTime value." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:dateTime?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:parse-ietf-date(\"Wed, 06 Jun 1994 07:29:35 GMT\")" ;
                fno:result "xs:dateTime(\"1994-06-06T07:29:35Z\")" ]
            [ a fno:Test ;
                fno:expression "fn:parse-ietf-date(\"Wed, 6 Jun 94 07:29:35 GMT\")" ;
                fno:result "xs:dateTime(\"1994-06-06T07:29:35Z\")" ]
            [ a fno:Test ;
                fno:expression "fn:parse-ietf-date(\"Wed Jun 06 11:54:45 EST 2013\")" ;
                fno:result "xs:dateTime(\"2013-06-06T11:54:45-05:00\")" ]
            [ a fno:Test ;
                fno:expression "fn:parse-ietf-date(\"Sunday, 06-Nov-94 08:49:37 GMT\")" ;
                fno:result "xs:dateTime(\"1994-11-06T08:49:37Z\")" ]
            [ a fno:Test ;
                fno:expression "fn:parse-ietf-date(\"Wed, 6 Jun 94 07:29:35 +0500\")" ;
                fno:result "xs:dateTime(\"1994-06-06T07:29:35+05:00\")" ] ) ;
        .
    
    xpath-fn:resolve-QName a fno:Function ;
        fno:name "resolve-QName" ;
        dc:description "Returns an xs:QName value (that is, an expanded-QName) by taking an xs:string that has the lexical form of an xs:QName (a string in the form \"prefix:local-name\" or \"local-name\") and resolving it using the in-scope namespaces for a given element." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "qname" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "element" ;
                fno:type "element()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:QName?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:QName a fno:Function ;
        fno:name "QName" ;
        dc:description "Returns an xs:QName value formed using a supplied namespace URI and lexical QName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "paramURI" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "paramQName" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:QName" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:QName-equal a fno:Function ;
        fno:name "QName-equal" ;
        dc:description "Returns true if two supplied QNames have the same namespace URI and the same local part." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:QName" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:QName" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:prefix-from-QName a fno:Function ;
        fno:name "prefix-from-QName" ;
        dc:description "Returns the prefix component of the supplied QName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:QName?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:NCName?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:local-name-from-QName a fno:Function ;
        fno:name "local-name-from-QName" ;
        dc:description "Returns the local part of the supplied QName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:QName?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:NCName?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:local-name-from-QName(fn:QName(\"http://www.example.com/example\", \"person\"))" ;
                fno:result "\"person\"" ] ) ;
        .
    
    xpath-fn:namespace-uri-from-QName a fno:Function ;
        fno:name "namespace-uri-from-QName" ;
        dc:description "Returns the namespace URI part of the supplied QName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:QName?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:namespace-uri-from-QName(fn:QName(\"http://www.example.com/example\", \"person\"))" ;
                fno:result "xs:anyURI(\"http://www.example.com/example\")" ] ) ;
        .
    
    xpath-fn:namespace-uri-for-prefix a fno:Function ;
        fno:name "namespace-uri-for-prefix" ;
        dc:description "Returns the namespace URI of one of the in-scope namespaces for $element, identified by its namespace prefix." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "prefix" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "element" ;
                fno:type "element()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:namespace-uri-for-prefix(\"z\", $e)" ;
                fno:result "\"http://example.org/two\"" ]
            [ a fno:Test ;
                fno:expression "fn:namespace-uri-for-prefix(\"\", $e)" ;
                fno:result "\"http://example.org/one\"" ]
            [ a fno:Test ;
                fno:expression "fn:namespace-uri-for-prefix((), $e)" ;
                fno:result "\"http://example.org/one\"" ]
            [ a fno:Test ;
                fno:expression "fn:namespace-uri-for-prefix(\"xml\", $e)" ;
                fno:result "\"http://www.w3.org/XML/1998/namespace\"" ]
            [ a fno:Test ;
                fno:expression "fn:namespace-uri-for-prefix(\"xml\", $e)" ;
                fno:result "\"http://www.w3.org/XML/1998/namespace\"" ] ) ;
        .
    
    xpath-fn:in-scope-prefixes a fno:Function ;
        fno:name "in-scope-prefixes" ;
        dc:description "Returns the prefixes of the in-scope namespaces for an element node." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "element" ;
                fno:type "element()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string*" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:hexBinary-equal a fno:Function ;
        fno:name "hexBinary-equal" ;
        dc:description "Returns true if two xs:hexBinary values contain the same octet sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value1" ;
                fno:type "xs:hexBinary" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value2" ;
                fno:type "xs:hexBinary" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:hexBinary-less-than a fno:Function ;
        fno:name "hexBinary-less-than" ;
        dc:description "Returns true if the first argument is less than the second." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:hexBinary" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:hexBinary" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:hexBinary-greater-than a fno:Function ;
        fno:name "hexBinary-greater-than" ;
        dc:description "Returns true if the first argument is greater than the second." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:hexBinary" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:hexBinary" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:base64Binary-equal a fno:Function ;
        fno:name "base64Binary-equal" ;
        dc:description "Returns true if two xs:base64Binary values contain the same octet sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "value1" ;
                fno:type "xs:base64Binary" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value2" ;
                fno:type "xs:base64Binary" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:base64Binary-less-than a fno:Function ;
        fno:name "base64Binary-less-than" ;
        dc:description "Returns true if the first argument is less than the second." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:base64Binary" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:base64Binary" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:base64Binary-greater-than a fno:Function ;
        fno:name "base64Binary-greater-than" ;
        dc:description "Returns true if the first argument is greater than the second." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:base64Binary" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:base64Binary" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-op:NOTATION-equal a fno:Function ;
        fno:name "NOTATION-equal" ;
        dc:description "Returns true if the two xs:NOTATION values have the same namespace URI and the same local part." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg1" ;
                fno:type "xs:NOTATION" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg2" ;
                fno:type "xs:NOTATION" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:name a fno:Function ;
        fno:name "name" ;
        dc:description "Returns the name of a node, as an xs:string that is either the zero-length string, or has the lexical form of an xs:QName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:local-name a fno:Function ;
        fno:name "local-name" ;
        dc:description "Returns the local part of the name of $arg as an xs:string that is either the zero-length string, or has the lexical form of an xs:NCName." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:namespace-uri a fno:Function ;
        fno:name "namespace-uri" ;
        dc:description "Returns the namespace URI part of the name of $arg, as an xs:anyURI value." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:number a fno:Function ;
        fno:name "number" ;
        dc:description "Returns the value indicated by $arg or, if $arg is not specified, the context item after atomization, converted to an xs:double." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:double" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:number($item1/quantity)" ;
                fno:result "5.0e0" ]
            [ a fno:Test ;
                fno:expression "fn:number($item2/description)" ;
                fno:result "xs:double(\'NaN\')" ] ) ;
        .
    
    xpath-fn:lang a fno:Function ;
        fno:name "lang" ;
        dc:description "This function tests whether the language of $node, or the context item if the second argument is omitted, as specified by xml:lang attributes is the same as, or is a sublanguage of, the language specified by $testlang." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "testlang" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "testlang" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "node" ;
                fno:type "node()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:path a fno:Function ;
        fno:name "path" ;
        dc:description "Returns a path expression that can be used to select the supplied node relative to the root of its containing document." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:path($e)" ;
                fno:result "\'/\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($e/*:p)" ;
                fno:result "\'/Q{http://example.com/one}p[1]\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($e/*:p/@xml:lang)" ;
                fno:result "\'/Q{http://example.com/one}p[1]/@Q{http://www.w3.org/XML/1998/namespace}lang\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($e/*:p/@author)" ;
                fno:result "\'/Q{http://example.com/one}p[1]/@author\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($e/*:p/*:br[2])" ;
                fno:result "\'/Q{http://example.com/one}p[1]/Q{http://example.com/one}br[2]\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($e//text()[starts-with(normalize-space(), \'Tochter\')])" ;
                fno:result "\'/Q{http://example.com/one}p[1]/text()[2]\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($emp)" ;
                fno:result "\'Q{http://www.w3.org/2005/xpath-functions}root()\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($emp/@xml:id)" ;
                fno:result "\'Q{http://www.w3.org/2005/xpath-functions}root()/@Q{http://www.w3.org/XML/1998/namespace}id\'" ]
            [ a fno:Test ;
                fno:expression "fn:path($emp/empnr)" ;
                fno:result "\'Q{http://www.w3.org/2005/xpath-functions}root()/Q{}empnr[1]\'" ] ) ;
        .
    
    xpath-fn:root a fno:Function ;
        fno:name "root" ;
        dc:description "Returns the root of the tree to which $arg belongs. This will usually, but not necessarily, be a document node." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "node() node()?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:has-children a fno:Function ;
        fno:name "has-children" ;
        dc:description "Returns true if the supplied node has one or more child nodes (of any kind)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "node" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:innermost a fno:Function ;
        fno:name "innermost" ;
        dc:description "Returns every node within the input sequence that is not an ancestor of another member of the input sequence; the nodes are returned in document order with duplicates eliminated." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "nodes" ;
                fno:type "node()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "node()*" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:outermost a fno:Function ;
        fno:name "outermost" ;
        dc:description "Returns every node within the input sequence that has no ancestor that is itself a member of the input sequence; the nodes are returned in document order with duplicates eliminated." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "nodes" ;
                fno:type "node()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "node()*" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:index-of a fno:Function ;
        fno:name "index-of" ;
        dc:description "Returns a sequence of positive integers giving the positions within the sequence $seq of items that are equal to $search." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "seq" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "search" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "seq" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "search" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:index-of((10, 20, 30, 40), 35)" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:index-of((10, 20, 30, 30, 20, 10), 20)" ;
                fno:result "(2, 5)" ]
            [ a fno:Test ;
                fno:expression "fn:index-of((\"a\", \"sport\", \"and\", \"a\", \"pastime\"), \"a\")" ;
                fno:result "(1, 4)" ]
            [ a fno:Test ;
                fno:expression "fn:index-of(current-date(), 23)" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:index-of([1, [5, 6], [6, 7]], 6)" ;
                fno:result "(3, 4)" ] ) ;
        .
    
    xpath-fn:empty a fno:Function ;
        fno:name "empty" ;
        dc:description "Returns true if the argument is the empty sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:empty((1,2,3)[10])" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:empty(fn:remove((\"hello\", \"world\"), 1))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:empty([])" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:empty(map{})" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:empty(\"\")" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-fn:exists a fno:Function ;
        fno:name "exists" ;
        dc:description "Returns true if the argument is a non-empty sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:exists(fn:remove((\"hello\"), 1))" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:exists(fn:remove((\"hello\", \"world\"), 1))" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:exists([])" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:exists(map{})" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:exists(\"\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-fn:distinct-values a fno:Function ;
        fno:name "distinct-values" ;
        dc:description "Returns the values that appear in a sequence, with duplicates eliminated." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:distinct-values((1, 2.0, 3, 2))" ;
                fno:result "(1, 3, 2.0)" ]
            [ a fno:Test ;
                fno:expression "fn:distinct-values((xs:untypedAtomic(\"cherry\"), xs:untypedAtomic(\"plum\"), xs:untypedAtomic(\"plum\")))" ;
                fno:result "(xs:untypedAtomic(\"cherry\"), xs:untypedAtomic(\"plum\"))" ] ) ;
        .
    
    xpath-fn:insert-before a fno:Function ;
        fno:name "insert-before" ;
        dc:description "Returns a sequence constructed by inserting an item or a sequence of items at a given position within an existing sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "target" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "position" ;
                fno:type "xs:integer" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "inserts" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:insert-before($abc, 0, \"z\")" ;
                fno:result "(\"z\", \"a\", \"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:insert-before($abc, 1, \"z\")" ;
                fno:result "(\"z\", \"a\", \"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:insert-before($abc, 2, \"z\")" ;
                fno:result "(\"a\", \"z\", \"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:insert-before($abc, 3, \"z\")" ;
                fno:result "(\"a\", \"b\", \"z\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:insert-before($abc, 4, \"z\")" ;
                fno:result "(\"a\", \"b\", \"c\", \"z\")" ] ) ;
        .
    
    xpath-fn:remove a fno:Function ;
        fno:name "remove" ;
        dc:description "Returns a new sequence containing all the items of $target except the item at position $position." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "target" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "position" ;
                fno:type "xs:integer" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:remove($abc, 0)" ;
                fno:result "(\"a\", \"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:remove($abc, 1)" ;
                fno:result "(\"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:remove($abc, 6)" ;
                fno:result "(\"a\", \"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:remove((), 3)" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:head a fno:Function ;
        fno:name "head" ;
        dc:description "Returns the first item in a sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:head(1 to 5)" ;
                fno:result "1" ]
            [ a fno:Test ;
                fno:expression "fn:head((\"a\", \"b\", \"c\"))" ;
                fno:result "\"a\"" ]
            [ a fno:Test ;
                fno:expression "fn:head(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:head([1,2,3])" ;
                fno:result "[1,2,3]" ] ) ;
        .
    
    xpath-fn:tail a fno:Function ;
        fno:name "tail" ;
        dc:description "Returns all but the first item in a sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:tail(1 to 5)" ;
                fno:result "(2, 3, 4, 5)" ]
            [ a fno:Test ;
                fno:expression "fn:tail((\"a\", \"b\", \"c\"))" ;
                fno:result "(\"b\", \"c\")" ]
            [ a fno:Test ;
                fno:expression "fn:tail(\"a\")" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:tail(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:tail([1,2,3])" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:reverse a fno:Function ;
        fno:name "reverse" ;
        dc:description "Reverses the order of items in a sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:reverse($abc)" ;
                fno:result "(\"c\", \"b\", \"a\")" ]
            [ a fno:Test ;
                fno:expression "fn:reverse((\"hello\"))" ;
                fno:result "(\"hello\")" ]
            [ a fno:Test ;
                fno:expression "fn:reverse(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:reverse([1,2,3])" ;
                fno:result "[1,2,3]" ]
            [ a fno:Test ;
                fno:expression "fn:reverse(([1,2,3],[4,5,6]))" ;
                fno:result "([4,5,6],[1,2,3])" ] ) ;
        .
    
    xpath-fn:subsequence a fno:Function ;
        fno:name "subsequence" ;
        dc:description "Returns the contiguous sequence of items in the value of $sourceSeq beginning at the position indicated by the value of $startingLoc and continuing for the number of items indicated by the value of $length." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "sourceSeq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "startingLoc" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "sourceSeq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "startingLoc" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "length" ;
                fno:type "xs:double" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:subsequence($seq, 4)" ;
                fno:result "(\"item4\", \"item5\")" ]
            [ a fno:Test ;
                fno:expression "fn:subsequence($seq, 3, 2)" ;
                fno:result "(\"item3\", \"item4\")" ] ) ;
        .
    
    xpath-fn:unordered a fno:Function ;
        fno:name "unordered" ;
        dc:description "Returns the items of $sourceSeq in an implementation-dependent order." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "sourceSeq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:unordered((1, 2, 3, 4, 5))" ;
                fno:result "(1, 2, 3, 4, 5)" ] ) ;
        .
    
    xpath-fn:zero-or-one a fno:Function ;
        fno:name "zero-or-one" ;
        dc:description "Returns $arg if it contains zero or one items. Otherwise, raises an error." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:one-or-more a fno:Function ;
        fno:name "one-or-more" ;
        dc:description "Returns $arg if it contains one or more items. Otherwise, raises an error." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()+" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:exactly-one a fno:Function ;
        fno:name "exactly-one" ;
        dc:description "Returns $arg if it contains exactly one item. Otherwise, raises an error." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:deep-equal a fno:Function ;
        fno:name "deep-equal" ;
        dc:description "This function assesses whether two sequences are deep-equal to each other. To be deep-equal, they must contain items that are pairwise deep-equal; and for two items to be deep-equal, they must either be atomic values that compare equal, or nodes of the same kind, with the same name, whose children are deep-equal, or maps with matching entries, or arrays with matching members." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "parameter1" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "parameter2" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "parameter1" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "parameter2" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:deep-equal($at, $at/*)" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:deep-equal($at/name[1], $at/name[2])" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:deep-equal($at/name[1], $at/name[3])" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:deep-equal($at/name[1], \'Peter Parker\')" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:deep-equal(map{1:\'a\', 2:\'b\'}, map{2:\'b\', 1:\'a\'})" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:deep-equal([1, 2, 3], [1, 2, 3])" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:deep-equal((1, 2, 3), [1, 2, 3])" ;
                fno:result "false()" ] ) ;
        .
    
    xpath-fn:count a fno:Function ;
        fno:name "count" ;
        dc:description "Returns the number of items in a sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:count($seq1)" ;
                fno:result "2" ]
            [ a fno:Test ;
                fno:expression "fn:count($seq3)" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:count($seq2)" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "fn:count($seq2[. > 100])" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:count([])" ;
                fno:result "1" ]
            [ a fno:Test ;
                fno:expression "fn:count([1,2,3])" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:avg a fno:Function ;
        fno:name "avg" ;
        dc:description "Returns the average of the values in the input sequence $arg, that is, the sum of the values divided by the number of values." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:avg($seq3)" ;
                fno:result "4.0" ]
            [ a fno:Test ;
                fno:expression "fn:avg(($d1, $d2))" ;
                fno:result "xs:yearMonthDuration(\"P10Y5M\")" ]
            [ a fno:Test ;
                fno:expression "fn:avg(())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:avg((xs:float(\'INF\'), xs:float(\'-INF\')))" ;
                fno:result "xs:float(\'NaN\')" ]
            [ a fno:Test ;
                fno:expression "fn:avg(($seq3, xs:float(\'NaN\')))" ;
                fno:result "xs:float(\'NaN\')" ] ) ;
        .
    
    xpath-fn:max a fno:Function ;
        fno:name "max" ;
        dc:description "Returns a value that is equal to the highest value appearing in the input sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:max((3,4,5))" ;
                fno:result "5" ]
            [ a fno:Test ;
                fno:expression "fn:max([3,4,5])" ;
                fno:result "5" ]
            [ a fno:Test ;
                fno:expression "fn:max((xs:integer(5), xs:float(5.0), xs:double(0)))" ;
                fno:result "xs:double(5.0e0)" ]
            [ a fno:Test ;
                fno:expression "fn:max((fn:current-date(), xs:date(\"2100-01-01\")))" ;
                fno:result "xs:date(\"2100-01-01\")" ]
            [ a fno:Test ;
                fno:expression "fn:max((\"a\", \"b\", \"c\"))" ;
                fno:result "\"c\"" ] ) ;
        .
    
    xpath-fn:min a fno:Function ;
        fno:name "min" ;
        dc:description "Returns a value that is equal to the lowest value appearing in the input sequence." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:min((3,4,5))" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "fn:min([3,4,5])" ;
                fno:result "3" ]
            [ a fno:Test ;
                fno:expression "fn:min((xs:integer(5), xs:float(5), xs:double(10)))" ;
                fno:result "xs:double(5.0e0)" ]
            [ a fno:Test ;
                fno:expression "fn:min((fn:current-date(), xs:date(\"1900-01-01\")))" ;
                fno:result "xs:date(\"1900-01-01\")" ]
            [ a fno:Test ;
                fno:expression "fn:min((\"a\", \"b\", \"c\"))" ;
                fno:result "\"a\"" ] ) ;
        .
    
    xpath-fn:sum a fno:Function ;
        fno:name "sum" ;
        dc:description "Returns a value obtained by adding together the values in $arg." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "zero" ;
                fno:type "xs:anyAtomicType?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType xs:anyAtomicType?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:sum(($d1, $d2))" ;
                fno:result "xs:yearMonthDuration(\"P20Y10M\")" ]
            [ a fno:Test ;
                fno:expression "fn:sum($seq1[. lt xs:yearMonthDuration(\'P3M\')], xs:yearMonthDuration(\'P0M\'))" ;
                fno:result "xs:yearMonthDuration(\"P0M\")" ]
            [ a fno:Test ;
                fno:expression "fn:sum($seq3)" ;
                fno:result "12" ]
            [ a fno:Test ;
                fno:expression "fn:sum(())" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:sum((),())" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "fn:sum((1 to 100)[. lt 0], 0)" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "fn:sum(($d1, $d2), \"ein Augenblick\")" ;
                fno:result "xs:yearMonthDuration(\"P20Y10M\")" ]
            [ a fno:Test ;
                fno:expression "fn:sum([1, 2, 3])" ;
                fno:result "6" ]
            [ a fno:Test ;
                fno:expression "fn:sum([[1, 2], [3, 4]])" ;
                fno:result "10" ] ) ;
        .
    
    xpath-fn:id a fno:Function ;
        fno:name "id" ;
        dc:description "Returns the sequence of element nodes that have an ID value matching the value of one or more of the IDREF values supplied in $arg." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "node" ;
                fno:type "node()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "element()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "$emp/id(\'ID21256\')/name()" ;
                fno:result "\"employee\"" ]
            [ a fno:Test ;
                fno:expression "$emp/id(\'E21256\')/name()" ;
                fno:result "\"empnr\"" ] ) ;
        .
    
    xpath-fn:element-with-id a fno:Function ;
        fno:name "element-with-id" ;
        dc:description "Returns the sequence of element nodes that have an ID value matching the value of one or more of the IDREF values supplied in $arg." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "node" ;
                fno:type "node()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "element()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "$emp/fn:element-with-id(\'ID21256\')/name()" ;
                fno:result "\"employee\"" ]
            [ a fno:Test ;
                fno:expression "$emp/fn:element-with-id(\'E21256\')/name()" ;
                fno:result "\"employee\"" ] ) ;
        .
    
    xpath-fn:idref a fno:Function ;
        fno:name "idref" ;
        dc:description "Returns the sequence of element or attribute nodes with an IDREF value matching the value of one or more of the ID values supplied in $arg." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "node" ;
                fno:type "node()" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "node()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "$emp/(element-with-id(\'ID21256\')/@xml:id => fn:idref())/ancestor::employee/last => string()" ;
                fno:result "\"Brown\"" ]
            [ a fno:Test ;
                fno:expression "$emp/(element-with-id(\'E30561\')/empnr => fn:idref())/ancestor::employee/last => string()" ;
                fno:result "\"Singh\"" ] ) ;
        .
    
    xpath-fn:doc a fno:Function ;
        fno:name "doc" ;
        dc:description "Retrieves a document using a URI supplied as an xs:string, and returns the corresponding document node." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "uri" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "document-node()?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:doc-available a fno:Function ;
        fno:name "doc-available" ;
        dc:description "The function returns true if and only if the function call fn:doc($uri) would return a document node." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "uri" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:collection a fno:Function ;
        fno:name "collection" ;
        dc:description "Returns a sequence of items identified by a collection URI; or a default collection if no URI is supplied." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:uri-collection a fno:Function ;
        fno:name "uri-collection" ;
        dc:description "Returns a sequence of xs:anyURI values representing the URIs in a URI collection." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyURI*" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:unparsed-text a fno:Function ;
        fno:name "unparsed-text" ;
        dc:description "The fn:unparsed-text function reads an external resource (for example, a file) and returns a string representation of the resource." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "href" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "href" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "encoding" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:unparsed-text-lines a fno:Function ;
        fno:name "unparsed-text-lines" ;
        dc:description "The fn:unparsed-text-lines function reads an external resource (for example, a file) and returns its contents as a sequence of strings, one for each line of text in the string representation of the resource." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "href" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "href" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "encoding" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string*" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:unparsed-text-available a fno:Function ;
        fno:name "unparsed-text-available" ;
        dc:description "Because errors in evaluating the fn:unparsed-text function are non-recoverable, these two functions are provided to allow an application to determine whether a call with particular arguments would succeed." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "href" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "href" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "encoding" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:environment-variable a fno:Function ;
        fno:name "environment-variable" ;
        dc:description "Returns the value of a system environment variable, if it exists." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "name" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:available-environment-variables a fno:Function ;
        fno:name "available-environment-variables" ;
        dc:description "Returns a list of environment variable names that are suitable for passing to fn:environment-variable, as a (possibly empty) sequence of strings." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:string*" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:generate-id a fno:Function ;
        fno:name "generate-id" ;
        dc:description "This function returns a string that uniquely identifies a given node." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "node()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:parse-xml a fno:Function ;
        fno:name "parse-xml" ;
        dc:description "This function takes as input an XML document represented as a string, and returns the document node at the root of an XDM tree representing the parsed document." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "document-node(element(*))?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:parse-xml-fragment a fno:Function ;
        fno:name "parse-xml-fragment" ;
        dc:description "This function takes as input an XML external entity represented as a string, and returns the document node at the root of an XDM tree representing the parsed document fragment." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "document-node()?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:serialize a fno:Function ;
        fno:name "serialize" ;
        dc:description "This function serializes the supplied input sequence $arg as described in , returning the serialized representation of the sequence as a string." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arg" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "params" ;
                fno:type "item()?" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:serialize($data, $params)" ;
                fno:result "\'a b=\"3\"/\'" ]
            [ a fno:Test ;
                fno:expression "fn:serialize($data, map{\"method\":\"xml\", \"omit-xml-declaration\":true()})" ;
                fno:result "\'a b=\"3\"/\'" ] ) ;
        .
    
    xpath-fn:position a fno:Function ;
        fno:name "position" ;
        dc:description "Returns the context position from the dynamic context." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:last a fno:Function ;
        fno:name "last" ;
        dc:description "Returns the context size from the dynamic context." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "(1 to 20)[fn:last() - 1]" ;
                fno:result "19" ] ) ;
        .
    
    xpath-fn:current-dateTime a fno:Function ;
        fno:name "current-dateTime" ;
        dc:description "Returns the current date and time (with timezone)." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:dateTimeStamp" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:current-date a fno:Function ;
        fno:name "current-date" ;
        dc:description "Returns the current date." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:date" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:current-time a fno:Function ;
        fno:name "current-time" ;
        dc:description "Returns the current time." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:time" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:implicit-timezone a fno:Function ;
        fno:name "implicit-timezone" ;
        dc:description "Returns the value of the implicit timezone property from the dynamic context." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:dayTimeDuration" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:default-collation a fno:Function ;
        fno:name "default-collation" ;
        dc:description "Returns the value of the default collation property from the static context." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:string" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:default-language a fno:Function ;
        fno:name "default-language" ;
        dc:description "Returns the value of the default language property from the dynamic context." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:language" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:static-base-uri a fno:Function ;
        fno:name "static-base-uri" ;
        dc:description "This function returns the value of the static base URI property from the static context." ;
        fno:expects ( 
        ) ;
        fno:returns ( "xs:anyURI?" ) ;
        fno:example ( ) ;
        .
    
    xpath-fn:function-lookup a fno:Function ;
        fno:name "function-lookup" ;
        dc:description "Returns the function having a given name and arity, if there is one." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "name" ;
                fno:type "xs:QName" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "arity" ;
                fno:type "xs:integer" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "function(*)?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:function-lookup(xs:QName(\'fn:substring\'), 2)(\'abcd\', 2)" ;
                fno:result "\'bcd\'" ] ) ;
        .
    
    xpath-fn:function-name a fno:Function ;
        fno:name "function-name" ;
        dc:description "Returns the name of the function identified by a function item." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "func" ;
                fno:type "function(*)" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:QName?" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:function-name(fn:substring#2)" ;
                fno:result "fn:QName(\"http://www.w3.org/2005/xpath-functions\", \"fn:substring\")" ]
            [ a fno:Test ;
                fno:expression "fn:function-name(function($node){count($node/*)})" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:function-arity a fno:Function ;
        fno:name "function-arity" ;
        dc:description "Returns the arity of the function identified by a function item." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "func" ;
                fno:type "function(*)" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:function-arity(fn:substring#2)" ;
                fno:result "2" ]
            [ a fno:Test ;
                fno:expression "fn:function-arity(function($node){name($node)})" ;
                fno:result "1" ]
            [ a fno:Test ;
                fno:expression "let $initial := fn:substring(?, 1, 1) return fn:function-arity($initial)" ;
                fno:result "1" ] ) ;
        .
    
    xpath-fn:for-each a fno:Function ;
        fno:name "for-each" ;
        dc:description "Applies the function item $action to every item from the sequence $seq in turn, returning the concatenation of the resulting sequences in order." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "seq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "action" ;
                fno:type "function(item()) as item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:for-each(1 to 5, function($a) { $a * $a })" ;
                fno:result "(1, 4, 9, 16, 25)" ]
            [ a fno:Test ;
                fno:expression "fn:for-each((\"john\", \"jane\"), fn:string-to-codepoints#1)" ;
                fno:result "(106, 111, 104, 110, 106, 97, 110, 101)" ]
            [ a fno:Test ;
                fno:expression "fn:for-each((\"23\", \"29\"), xs:int#1)" ;
                fno:result "(23, 29)" ] ) ;
        .
    
    xpath-fn:filter a fno:Function ;
        fno:name "filter" ;
        dc:description "Returns those items from the sequence $seq for which the supplied function $f returns true." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "seq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "f" ;
                fno:type "function(item()) as xs:boolean" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:filter(1 to 10, function($a) {$a mod 2 = 0})" ;
                fno:result "(2, 4, 6, 8, 10)" ]
            [ a fno:Test ;
                fno:expression "fn:filter((), fn:lang(\"en\", ?))" ;
                fno:result "()" ] ) ;
        .
    
    xpath-fn:fold-left a fno:Function ;
        fno:name "fold-left" ;
        dc:description "Processes the supplied sequence from left to right, applying the supplied function repeatedly to each item in turn, together with an accumulated result value." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "seq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "zero" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "f" ;
                fno:type "function(item()*, item()) as item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:fold-left(1 to 5, 0, function($a, $b) { $a + $b })" ;
                fno:result "15" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left((2,3,5,7), 1, function($a, $b) { $a * $b })" ;
                fno:result "210" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left((true(), false(), false()), false(), function($a, $b) { $a or $b })" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left((true(), false(), false()), false(), function($a, $b) { $a and $b })" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left(1 to 5, (), function($a, $b) {($b, $a)})" ;
                fno:result "(5,4,3,2,1)" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left(1 to 5, \"\", fn:concat(?, \".\", ?))" ;
                fno:result "\".1.2.3.4.5\"" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left(1 to 5, \"$zero\", fn:concat(\"$f(\", ?, \", \", ?, \")\"))" ;
                fno:result "\"$f($f($f($f($f($zero, 1), 2), 3), 4), 5)\"" ]
            [ a fno:Test ;
                fno:expression "fn:fold-left(1 to 5, map{}, function($map, $n) {map:put($map, $n, $n*2)})" ;
                fno:result "map{1:2, 2:4, 3:6, 4:8, 5:10}" ] ) ;
        .
    
    xpath-fn:fold-right a fno:Function ;
        fno:name "fold-right" ;
        dc:description "Processes the supplied sequence from right to left, applying the supplied function repeatedly to each item in turn, together with an accumulated result value." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "seq" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "zero" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "f" ;
                fno:type "function(item(), item()*) as item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:fold-right(1 to 5, 0, function($a, $b) { $a + $b })" ;
                fno:result "15" ]
            [ a fno:Test ;
                fno:expression "fn:fold-right(1 to 5, \"\", fn:concat(?, \".\", ?))" ;
                fno:result "\"1.2.3.4.5.\"" ]
            [ a fno:Test ;
                fno:expression "fn:fold-right(1 to 5, \"$zero\", concat(\"$f(\", ?, \", \", ?, \")\"))" ;
                fno:result "\"$f(1, $f(2, $f(3, $f(4, $f(5, $zero)))))\"" ] ) ;
        .
    
    xpath-fn:for-each-pair a fno:Function ;
        fno:name "for-each-pair" ;
        dc:description "Applies the function item $action to successive pairs of items taken one from $seq1 and one from $seq2, returning the concatenation of the resulting sequences in order." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "seq1" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "seq2" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "action" ;
                fno:type "function(item(), item()) as item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:for-each-pair((\"a\", \"b\", \"c\"), (\"x\", \"y\", \"z\"), concat#2)" ;
                fno:result "(\"ax\", \"by\", \"cz\")" ]
            [ a fno:Test ;
                fno:expression "fn:for-each-pair(1 to 5, 1 to 5, function($a, $b){10*$a + $b})" ;
                fno:result "(11, 22, 33, 44, 55)" ]
            [ a fno:Test ;
                fno:expression "let $s := 1 to 8 return fn:for-each-pair($s, tail($s), function($a, $b){$a*$b})" ;
                fno:result "(2, 6, 12, 20, 30, 42, 56)" ] ) ;
        .
    
    xpath-fn:sort a fno:Function ;
        fno:name "sort" ;
        dc:description "Sorts a supplied sequence, based on the value of a sort key supplied as a function." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string?" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "function(item()) as xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:sort((1, 4, 6, 5, 3))" ;
                fno:result "(1, 3, 4, 5, 6)" ]
            [ a fno:Test ;
                fno:expression "fn:sort((1, -2, 5, 10, -10, 10, 8), (), fn:abs#1)" ;
                fno:result "(1, -2, 5, 8, 10, -10, 10)" ] ) ;
        .
    
    xpath-fn:apply a fno:Function ;
        fno:name "apply" ;
        dc:description "Makes a dynamic call on a function with an argument list supplied in the form of an array." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "function" ;
                fno:type "function(*)" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "array" ;
                fno:type "array(*)" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "fn:apply(fn:concat#3, [\"a\", \"b\", \"c\"])" ;
                fno:result "\"abc\"" ] ) ;
        .
    
    xpath-op:same-key a fno:Function ;
        fno:name "same-key" ;
        dc:description "Determines whether two atomic values can coexist as separate keys within a map." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "k1" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "k2" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example ( ) ;
        .
    
    xpath-map:merge a fno:Function ;
        fno:name "merge" ;
        dc:description "Returns a map that combines the entries from a number of existing maps." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "maps" ;
                fno:type "map(*)*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "maps" ;
                fno:type "map(*)*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "options" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "map(*)" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:merge(())" ;
                fno:result "map{}" ]
            [ a fno:Test ;
                fno:expression "map:merge((map:entry(0, \"no\"), map:entry(1, \"yes\")))" ;
                fno:result "map{0:\"no\", 1:\"yes\"}" ]
            [ a fno:Test ;
                fno:expression "map:merge(($week, map{7:\"Unbekannt\"}))" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Samstag\", 7:\"Unbekannt\"}" ]
            [ a fno:Test ;
                fno:expression "map:merge(($week, map{6:\"Sonnabend\"}), map{\"duplicates\":\"use-last\"})" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Sonnabend\"}" ]
            [ a fno:Test ;
                fno:expression "map:merge(($week, map{6:\"Sonnabend\"}), map{\"duplicates\":\"use-first\"})" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Samstag\"}" ]
            [ a fno:Test ;
                fno:expression "map:merge(($week, map{6:\"Sonnabend\"}), map{\"duplicates\":\"combine\"})" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:(\"Samstag\", \"Sonnabend\")}" ] ) ;
        .
    
    xpath-map:keys a fno:Function ;
        fno:name "keys" ;
        dc:description "Returns a sequence containing all the keys present in a map" ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:anyAtomicType*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:keys(map{1:\"yes\", 2:\"no\"})" ;
                fno:result "(1,2)" ] ) ;
        .
    
    xpath-map:contains a fno:Function ;
        fno:name "contains" ;
        dc:description "Tests whether a supplied map contains an entry for a given key" ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:boolean" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:contains($week, 2)" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "map:contains($week, 9)" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "map:contains(map{}, \"xyz\")" ;
                fno:result "false()" ]
            [ a fno:Test ;
                fno:expression "map:contains(map{\"xyz\":23}, \"xyz\")" ;
                fno:result "true()" ]
            [ a fno:Test ;
                fno:expression "map:contains(map{\"abc\":23, \"xyz\":()}, \"xyz\")" ;
                fno:result "true()" ] ) ;
        .
    
    xpath-map:get a fno:Function ;
        fno:name "get" ;
        dc:description "Returns the value associated with a supplied key in a given map." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:get($week, 4)" ;
                fno:result "\"Donnerstag\"" ]
            [ a fno:Test ;
                fno:expression "map:get($week, 9)" ;
                fno:result "()" ]
            [ a fno:Test ;
                fno:expression "map:get(map:entry(7,()), 7)" ;
                fno:result "()" ] ) ;
        .
    
    xpath-map:find a fno:Function ;
        fno:name "find" ;
        dc:description "Searches the supplied input sequence and any contained maps and arrays for a map entry with the supplied key, and returns the corresponding values." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "input" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "array(*)" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:find($responses, 0)" ;
                fno:result "[\'no\', \'non\', \'nein\']" ]
            [ a fno:Test ;
                fno:expression "map:find($responses, 1)" ;
                fno:result "[\'yes\', \'oui\', (\'ja\', \'doch\')]" ]
            [ a fno:Test ;
                fno:expression "map:find($responses, 2)" ;
                fno:result "[]" ]
            [ a fno:Test ;
                fno:expression "map:find($inventory, \"parts\")" ;
                fno:result "[[map{\"name\":\"engine\", \"id\":\"YW678\", \"parts\":[]}], []]" ] ) ;
        .
    
    xpath-map:put a fno:Function ;
        fno:name "put" ;
        dc:description "Returns a map containing all the contents of the supplied map, but with an additional entry, which replaces any existing entry for the same key." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "map(*)" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:put($week, 6, \"Sonnabend\")" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Sonnabend\"}" ]
            [ a fno:Test ;
                fno:expression "map:put($week, -1, \"Unbekannt\")" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Samstag\", -1:\"Unbekannt\"}" ] ) ;
        .
    
    xpath-map:entry a fno:Function ;
        fno:name "entry" ;
        dc:description "Returns a map that contains a single entry (a key-value pair)." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:anyAtomicType" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "value" ;
                fno:type "item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "map(*)" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:entry(\"M\", \"Monday\")" ;
                fno:result "map{\"M\":\"Monday\"}" ] ) ;
        .
    
    xpath-map:remove a fno:Function ;
        fno:name "remove" ;
        dc:description "Returns a map containing all the entries from a supplied map, except those having a specified key." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "keys" ;
                fno:type "xs:anyAtomicType*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "map(*)" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:remove($week, 4)" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 5:\"Freitag\", 6:\"Samstag\"}" ]
            [ a fno:Test ;
                fno:expression "map:remove($week, 23)" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Samstag\"}" ]
            [ a fno:Test ;
                fno:expression "map:remove($week, (0, 6 to 7))" ;
                fno:result "map{1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\"}" ]
            [ a fno:Test ;
                fno:expression "map:remove($week, ())" ;
                fno:result "map{0:\"Sonntag\", 1:\"Montag\", 2:\"Dienstag\", 3:\"Mittwoch\", 4:\"Donnerstag\", 5:\"Freitag\", 6:\"Samstag\"}" ] ) ;
        .
    
    xpath-map:for-each a fno:Function ;
        fno:name "for-each" ;
        dc:description "Applies a supplied function to every entry in a map, returning the concatenation of the results." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "action" ;
                fno:type "function(xs:anyAtomicType, item()*) as item()*" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "item()*" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:for-each(map{1:\"yes\", 2:\"no\"}, function($k, $v){$k})" ;
                fno:result "(1,2)" ]
            [ a fno:Test ;
                fno:expression "distinct-values(map:for-each(map{1:\"yes\", 2:\"no\"}, function($k, $v){$v}))" ;
                fno:result "(\"yes\", \"no\")" ]
            [ a fno:Test ;
                fno:expression "map:merge(map:for-each(map{\"a\":1, \"b\":2}, function($k, $v){map:entry($k, $v+1)}))" ;
                fno:result "map{\"a\":2, \"b\":3}" ] ) ;
        .
    
    xpath-map:size a fno:Function ;
        fno:name "size" ;
        dc:description "Returns the number of entries in the supplied map." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "map" ;
                fno:type "map(*)" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:integer" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:size(map{})" ;
                fno:result "0" ]
            [ a fno:Test ;
                fno:expression "map:size(map{\"true\":1, \"false\":0})" ;
                fno:result "2" ] ) ;
        .
    
    xpath-fn:collation-key a fno:Function ;
        fno:name "collation-key" ;
        dc:description "Given a string value and a collation, generates an internal value called a collation key, with the property that the matching and ordering of collation keys reflects the matching and ordering of strings under the specified collation." ;
        fno:expects (
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "key" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ]
            [ a fno:Parameter ;
                fno:predicate "collation" ;
                fno:type "xs:string" ;
                fno:required "true"^^xsd:boolean  ] 
        ) ;
        fno:returns ( "xs:base64Binary" ) ;
        fno:example (
            [ a fno:Test ;
                fno:expression "map:merge((map{collation-key(\"A\", $C):1}, map{collation-key(\"a\", $C):2}), map{\"duplicates\":\"use-last\"})(collation-key(\"A\", $C))" ;
                fno:result "2" ]
            [ a fno:Test ;
                fno:expression "let $M := map{collation-key(\"A\", $C):1, collation-key(\"B\", $C):2} return $M(collation-key(\"a\", $C))" ;
                fno:result "1" ] ) ;
        .
    
    # xpath-fn:json-to-xml a fno:Function ;
    #     fno:name "json-to-xml" ;
    #     dc:description "Parses a string supplied in the form of a JSON text, returning the results in the form of an XML document node." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "json-text" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "json-text" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "options" ;
    #             fno:type "map(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "document-node()?" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "json-to-xml(\'{\"x\": 1, \"y\": [3,4,5]}\')" ;
    #             fno:result "map xmlns=\"http://www.w3.org/2005/xpath-functions\" number key=\"x\"1/number array key=\"y\" number3/number number4/number number5/number /array /map" ]
    #         [ a fno:Test ;
    #             fno:expression "json-to-xml(\'\"abcd\"\', map{\'liberal\': false()})" ;
    #             fno:result "string xmlns=\"http://www.w3.org/2005/xpath-functions\"abcd/string" ]
    #         [ a fno:Test ;
    #             fno:expression "json-to-xml(\'{\"x\": \"\\\\\", \"y\": \"\\u0025\"}\')" ;
    #             fno:result "map xmlns=\"http://www.w3.org/2005/xpath-functions\" string key=\"x\"\/string string key=\"y\"%/string /map" ]
    #         [ a fno:Test ;
    #             fno:expression "json-to-xml(\'{\"x\": \"\\\\\", \"y\": \"\\u0025\"}\', map{\'escape\': true()})" ;
    #             fno:result "map xmlns=\"http://www.w3.org/2005/xpath-functions\" string escaped=\"true\" key=\"x\"\\/string string key=\"y\"%/string /map" ] ) ;
    #     .
    
    # xpath-fn:xml-to-json a fno:Function ;
    #     fno:name "xml-to-json" ;
    #     dc:description "Converts an XML tree, whose format corresponds to the XML representation of JSON defined in this specification, into a string conforming to the JSON grammar." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "input" ;
    #             fno:type "node()?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "input" ;
    #             fno:type "node()?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "options" ;
    #             fno:type "map(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "xs:string?" ) ;
    #     fno:example ( ) ;
    #     .
    
    # xpath-fn:parse-json a fno:Function ;
    #     fno:name "parse-json" ;
    #     dc:description "Parses a string supplied in the form of a JSON text, returning the results typically in the form of a map or array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "json-text" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "json-text" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "options" ;
    #             fno:type "map(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()?" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'{\"x\":1, \"y\":[3,4,5]}\')" ;
    #             fno:result "map{\"x\":1e0,\"y\":[3e0,4e0,5e0]}" ]
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'\"abcd\"\')" ;
    #             fno:result "\"abcd\"" ]
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'{\"x\":\"\\\\\", \"y\":\"\\u0025\"}\')" ;
    #             fno:result "map{\"x\":\"\\",\"y\":\"%\"}" ]
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'{\"x\":\"\\\\\", \"y\":\"\\u0025\"}\', map{\'escape\':true()})" ;
    #             fno:result "map{\"x\":\"\\\",\"y\":\"%\"}" ]
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'{\"x\":\"\\\\\", \"y\":\"\\u0000\"}\')" ;
    #             fno:result "map{\"x\":\"\\",\"y\":codepoints-to-string(65533)}" ]
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'{\"x\":\"\\\\\", \"y\":\"\\u0000\"}\', map{\'escape\':true()})" ;
    #             fno:result "map{\"x\":\"\\\",\"y\":\"\u0000\"}" ]
    #         [ a fno:Test ;
    #             fno:expression "parse-json(\'{\"x\":\"\\\\\", \"y\":\"\\u0000\"}\', map{\'fallback\':function($s){\'[\'||$s||\']\'}})" ;
    #             fno:result "map{\"x\":\"\\",\"y\":\"[\u0000]\"}" ] ) ;
    #     .
    
    # xpath-fn:json-doc a fno:Function ;
    #     fno:name "json-doc" ;
    #     dc:description "Reads an external resource containing JSON, and returns the result of parsing the resource as JSON." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "href" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "href" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "options" ;
    #             fno:type "map(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()?" ) ;
    #     fno:example ( ) ;
    #     .
    
    # xpath-array:size a fno:Function ;
    #     fno:name "size" ;
    #     dc:description "Returns the number of members in the supplied array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "xs:integer" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:size([\"a\", \"b\", \"c\"])" ;
    #             fno:result "3" ]
    #         [ a fno:Test ;
    #             fno:expression "array:size([\"a\", [\"b\", \"c\"]])" ;
    #             fno:result "2" ]
    #         [ a fno:Test ;
    #             fno:expression "array:size([ ])" ;
    #             fno:result "0" ]
    #         [ a fno:Test ;
    #             fno:expression "array:size([[ ]])" ;
    #             fno:result "1" ] ) ;
    #     .
    
    # xpath-array:get a fno:Function ;
    #     fno:name "get" ;
    #     dc:description "Returns the value at the specified position in the supplied array (counting from 1)." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "position" ;
    #             fno:type "xs:integer" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()*" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "[\"a\", \"b\", \"c\"] => array:get(2)" ;
    #             fno:result "\"b\"" ]
    #         [ a fno:Test ;
    #             fno:expression "[\"a\", [\"b\", \"c\"]] => array:get(2)" ;
    #             fno:result "[\"b\", \"c\"]" ] ) ;
    #     .
    
    # xpath-array:put a fno:Function ;
    #     fno:name "put" ;
    #     dc:description "Returns an array containing all the members of a supplied array, except for one member which is replaced with a new value." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "position" ;
    #             fno:type "xs:integer" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "member" ;
    #             fno:type "item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:put([\"a\", \"b\", \"c\"], 2, \"d\")" ;
    #             fno:result "[\"a\", \"d\", \"c\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:put([\"a\", \"b\", \"c\"], 2, (\"d\", \"e\"))" ;
    #             fno:result "[\"a\", (\"d\", \"e\"), \"c\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:put([\"a\"], 1, [\"d\", \"e\"])" ;
    #             fno:result "[[\"d\", \"e\"]]" ] ) ;
    #     .
    
    # xpath-array:append a fno:Function ;
    #     fno:name "append" ;
    #     dc:description "Returns an array containing all the members of a supplied array, plus one additional member at the end." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "appendage" ;
    #             fno:type "item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:append([\"a\", \"b\", \"c\"], \"d\")" ;
    #             fno:result "[\"a\", \"b\", \"c\", \"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:append([\"a\", \"b\", \"c\"], (\"d\", \"e\"))" ;
    #             fno:result "[\"a\", \"b\", \"c\", (\"d\", \"e\")]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:append([\"a\", \"b\", \"c\"], [\"d\", \"e\"])" ;
    #             fno:result "[\"a\", \"b\", \"c\", [\"d\", \"e\"]]" ] ) ;
    #     .
    
    # xpath-array:join a fno:Function ;
    #     fno:name "join" ;
    #     dc:description "Concatenates the contents of several arrays into a single array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "arrays" ;
    #             fno:type "array(*)*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:join(())" ;
    #             fno:result "[ ]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:join([1, 2, 3])" ;
    #             fno:result "[1, 2, 3]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:join(([\"a\", \"b\"], [\"c\", \"d\"]))" ;
    #             fno:result "[\"a\", \"b\", \"c\", \"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:join(([\"a\", \"b\"], [\"c\", \"d\"], [ ]))" ;
    #             fno:result "[\"a\", \"b\", \"c\", \"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:join(([\"a\", \"b\"], [\"c\", \"d\"], [[\"e\", \"f\"]]))" ;
    #             fno:result "[\"a\", \"b\", \"c\", \"d\", [\"e\", \"f\"]]" ] ) ;
    #     .
    
    # xpath-array:subarray a fno:Function ;
    #     fno:name "subarray" ;
    #     dc:description "Returns an array containing all members from a supplied array starting at a supplied position, up to a specified length." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "start" ;
    #             fno:type "xs:integer" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "start" ;
    #             fno:type "xs:integer" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "length" ;
    #             fno:type "xs:integer" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([\"a\", \"b\", \"c\", \"d\"], 2)" ;
    #             fno:result "[\"b\", \"c\", \"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([\"a\", \"b\", \"c\", \"d\"], 5)" ;
    #             fno:result "[ ]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([\"a\", \"b\", \"c\", \"d\"], 2, 0)" ;
    #             fno:result "[ ]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([\"a\", \"b\", \"c\", \"d\"], 2, 1)" ;
    #             fno:result "[\"b\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([\"a\", \"b\", \"c\", \"d\"], 2, 2)" ;
    #             fno:result "[\"b\", \"c\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([\"a\", \"b\", \"c\", \"d\"], 5, 0)" ;
    #             fno:result "[ ]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:subarray([ ], 1, 0)" ;
    #             fno:result "[ ]" ] ) ;
    #     .
    
    # xpath-array:remove a fno:Function ;
    #     fno:name "remove" ;
    #     dc:description "Returns an array containing all the members of the supplied array, except for the members at specified positions." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "positions" ;
    #             fno:type "xs:integer*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:remove([\"a\", \"b\", \"c\", \"d\"], 1)" ;
    #             fno:result "[\"b\", \"c\", \"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:remove([\"a\", \"b\", \"c\", \"d\"], 2)" ;
    #             fno:result "[\"a\", \"c\", \"d\" ]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:remove([\"a\"], 1)" ;
    #             fno:result "[ ]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:remove([\"a\", \"b\", \"c\", \"d\"], 1 to 3)" ;
    #             fno:result "[\"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:remove([\"a\", \"b\", \"c\", \"d\"], ())" ;
    #             fno:result "[\"a\", \"b\", \"c\", \"d\"]" ] ) ;
    #     .
    
    # xpath-array:insert-before a fno:Function ;
    #     fno:name "insert-before" ;
    #     dc:description "Returns an array containing all the members of the supplied array, with one additional member at a specified position." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "position" ;
    #             fno:type "xs:integer" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "member" ;
    #             fno:type "item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:insert-before([\"a\", \"b\", \"c\", \"d\"], 3, (\"x\", \"y\"))" ;
    #             fno:result "[\"a\", \"b\", (\"x\", \"y\"), \"c\", \"d\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:insert-before([\"a\", \"b\", \"c\", \"d\"], 5, (\"x\", \"y\"))" ;
    #             fno:result "[\"a\", \"b\", \"c\", \"d\", (\"x\", \"y\")]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:insert-before([\"a\", \"b\", \"c\", \"d\"], 3, [\"x\", \"y\"])" ;
    #             fno:result "[\"a\", \"b\", [\"x\", \"y\"], \"c\", \"d\"]" ] ) ;
    #     .
    
    # xpath-array:head a fno:Function ;
    #     fno:name "head" ;
    #     dc:description "Returns the first member of an array, that is $array(1)." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()*" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:head([5, 6, 7, 8])" ;
    #             fno:result "5" ]
    #         [ a fno:Test ;
    #             fno:expression "array:head([[\"a\", \"b\"], [\"c\", \"d\"]])" ;
    #             fno:result "[\"a\", \"b\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:head([(\"a\", \"b\"), (\"c\", \"d\")])" ;
    #             fno:result "\"a\", \"b\"" ] ) ;
    #     .
    
    # xpath-array:tail a fno:Function ;
    #     fno:name "tail" ;
    #     dc:description "Returns an array containing all members except the first from a supplied array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:tail([5, 6, 7, 8])" ;
    #             fno:result "[6, 7, 8]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:tail([5])" ;
    #             fno:result "[ ]" ] ) ;
    #     .
    
    # xpath-array:reverse a fno:Function ;
    #     fno:name "reverse" ;
    #     dc:description "Returns an array containing all the members of a supplied array, but in reverse order." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:reverse([\"a\", \"b\", \"c\", \"d\"])" ;
    #             fno:result "[\"d\", \"c\", \"b\", \"a\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:reverse([(\"a\", \"b\"), (\"c\", \"d\")])" ;
    #             fno:result "[(\"c\", \"d\"), (\"a\", \"b\")]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:reverse([(1 to 5)])" ;
    #             fno:result "[(1, 2, 3, 4, 5)]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:reverse([])" ;
    #             fno:result "[]" ] ) ;
    #     .
    
    # xpath-array:for-each a fno:Function ;
    #     fno:name "for-each" ;
    #     dc:description "Returns an array whose size is the same as array:size($array), in which each member is computed by applying $function to the corresponding member of $array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "action" ;
    #             fno:type "function(item()*) as item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:for-each([\"A\", \"B\", 1, 2], function($z) {$z instance of xs:integer})" ;
    #             fno:result "[false(), false(), true(), true()]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:for-each([\"the cat\", \"sat\", \"on the mat\"], fn:tokenize#1)" ;
    #             fno:result "[(\"the\", \"cat\"), \"sat\", (\"on\", \"the\", \"mat\")]" ] ) ;
    #     .
    
    # xpath-array:filter a fno:Function ;
    #     fno:name "filter" ;
    #     dc:description "Returns an array containing those members of the $array for which $function returns true." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "function" ;
    #             fno:type "function(item()*) as xs:boolean" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:filter([\"A\", \"B\", 1, 2], function($x) {$x instance of xs:integer})" ;
    #             fno:result "[1, 2]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:filter([\"the cat\", \"sat\", \"on the mat\"], function($s){fn:count(fn:tokenize($s)) gt 1})" ;
    #             fno:result "[\"the cat\", \"on the mat\"]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:filter([\"A\", \"B\", \"\", 0, 1], boolean#1)" ;
    #             fno:result "[\"A\", \"B\", 1]" ] ) ;
    #     .
    
    # xpath-array:fold-left a fno:Function ;
    #     fno:name "fold-left" ;
    #     dc:description "Evaluates the supplied function cumulatively on successive members of the supplied array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "zero" ;
    #             fno:type "item()*" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "function" ;
    #             fno:type "function(item()*, item()*) as item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()*" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:fold-left([true(), true(), false()], true(), function($x, $y){$x and $y})" ;
    #             fno:result "false()" ]
    #         [ a fno:Test ;
    #             fno:expression "array:fold-left([true(), true(), false()], false(), function($x, $y){$x or $y})" ;
    #             fno:result "true()" ]
    #         [ a fno:Test ;
    #             fno:expression "array:fold-left([1,2,3], [], function($x, $y){[$x, $y]})" ;
    #             fno:result "[[[[], 1], 2], 3]" ] ) ;
    #     .
    
    # xpath-array:fold-right a fno:Function ;
    #     fno:name "fold-right" ;
    #     dc:description "Evaluates the supplied function cumulatively on successive values of the supplied array." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "zero" ;
    #             fno:type "item()*" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "function" ;
    #             fno:type "function(item()*, item()*) as item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()*" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:fold-right([true(), true(), false()], true(), function($x, $y){$x and $y})" ;
    #             fno:result "false()" ]
    #         [ a fno:Test ;
    #             fno:expression "array:fold-right([true(), true(), false()], false(), function($x, $y){$x or $y})" ;
    #             fno:result "true()" ]
    #         [ a fno:Test ;
    #             fno:expression "array:fold-right([1,2,3], [], function($x, $y){[$x, $y]})" ;
    #             fno:result "[1, [2, [3, []]]]" ] ) ;
    #     .
    
    # xpath-array:for-each-pair a fno:Function ;
    #     fno:name "for-each-pair" ;
    #     dc:description "Returns an array obtained by evaluating the supplied function once for each pair of members at the same position in the two supplied arrays." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array1" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "array2" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "function" ;
    #             fno:type "function(item()*, item()*) as item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:for-each-pair([\"A\", \"B\", \"C\"], [1, 2, 3], function($x, $y) { array {$x, $y}})" ;
    #             fno:result "[[\"A\", 1], [\"B\", 2], [\"C\", 3]]" ]
    #         [ a fno:Test ;
    #             fno:expression "let $A := [\"A\", \"B\", \"C\", \"D\"] return array:for-each-pair($A, array:tail($A), concat#2)" ;
    #             fno:result "[\"AB\", \"BC\", \"CD\"]" ] ) ;
    #     .
    
    # xpath-array:sort a fno:Function ;
    #     fno:name "sort" ;
    #     dc:description "Returns an array containing all the members of the supplied array, sorted according to the value of a sort key supplied as a function." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "collation" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "array" ;
    #             fno:type "array(*)" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "collation" ;
    #             fno:type "xs:string?" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "key" ;
    #             fno:type "function(item()*) as xs:anyAtomicType*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "array(*)" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:sort([1, 4, 6, 5, 3])" ;
    #             fno:result "[1, 3, 4, 5, 6]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:sort([1, -2, 5, 10, -10, 10, 8], (), fn:abs#1)" ;
    #             fno:result "[1, -2, 5, 8, 10, -10, 10]" ]
    #         [ a fno:Test ;
    #             fno:expression "array:sort([(1,0), (1,1), (0,1), (0,0)])" ;
    #             fno:result "[(0,0), (0,1), (1,0), (1,1)]" ] ) ;
    #     .
    
    # xpath-array:flatten a fno:Function ;
    #     fno:name "flatten" ;
    #     dc:description "Replaces any array appearing in a supplied sequence with the members of the array, recursively." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "input" ;
    #             fno:type "item()*" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "item()*" ) ;
    #     fno:example (
    #         [ a fno:Test ;
    #             fno:expression "array:flatten([1, 4, 6, 5, 3])" ;
    #             fno:result "(1, 4, 6, 5, 3)" ]
    #         [ a fno:Test ;
    #             fno:expression "array:flatten(([1, 2, 5], [[10, 11], 12], [], 13))" ;
    #             fno:result "(1, 2, 5, 10, 11, 12, 13)" ]
    #         [ a fno:Test ;
    #             fno:expression "array:flatten([(1,0), (1,1), (0,1), (0,0)])" ;
    #             fno:result "(1, 0, 1, 1, 0, 1, 0, 0)" ] ) ;
    #     .
    
    # xpath-fn:load-xquery-module a fno:Function ;
    #     fno:name "load-xquery-module" ;
    #     dc:description "Provides access to the public functions and global variables of a dynamically-loaded XQuery library module." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "module-uri" ;
    #             fno:type "xs:string" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "module-uri" ;
    #             fno:type "xs:string" ;
    #             fno:required "true"^^xsd:boolean  ]
    #         [ a fno:Parameter ;
    #             fno:predicate "options" ;
    #             fno:type "map(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "map(*)" ) ;
    #     fno:example ( ) ;
    #     .
    
    # xpath-fn:transform a fno:Function ;
    #     fno:name "transform" ;
    #     dc:description "Invokes a transformation using a dynamically-loaded XSLT stylesheet." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "options" ;
    #             fno:type "map(*)" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "map(*)" ) ;
    #     fno:example ( ) ;
    #     .
    
    # xpath-fn:random-number-generator a fno:Function ;
    #     fno:name "random-number-generator" ;
    #     dc:description "Returns a random number generator, which can be used to generate sequences of random numbers." ;
    #     fno:expects (
    #         [ a fno:Parameter ;
    #             fno:predicate "seed" ;
    #             fno:type "xs:anyAtomicType?" ;
    #             fno:required "true"^^xsd:boolean  ] 
    #     ) ;
    #     fno:returns ( "map(xs:string, item())" ) ;
    #     fno:example ( ) ;
    #     .
    