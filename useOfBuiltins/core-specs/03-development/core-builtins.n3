@prefix crypto: <http://www.w3.org/2000/10/swap/crypto#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix time: <http://www.w3.org/2000/10/swap/time#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


crypto:sha a fno:Function ;
    dcterms:comment "The object is a SHA-1 hash of the subject." ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "SHA-1 hash" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type xsd:string ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type rdfs:Literal ] ) ] ) .
list:append a fno:Function ;
    dcterms:comment """Concatenates separate lists into a single list. 
`true` if and only if the subject is a list of lists and the concatenation of all those lists is `$o`.
`$o` can be calculated as a function of the subject. 
Example: `( (1 2) (3 4) ) list:append (1 2 3 4).`""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "append" ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
list:in a fno:Function ;
    dcterms:comment """Determines if an subject is a member of the object list or binds every member of the object list to the subject.
`true` if and only `$o` is a list and `$s` is in that list.
`$s` can be calculated from `$o`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "in" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
list:last a fno:Function ;
    dcterms:comment """Extracts the first member of a list. 
`true` if and only the subject is a list and `$o` is the last member of that list.
`$o` can be calculated as a function of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "in" ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
list:member a fno:Function ;
    dcterms:comment """Determines if an object is a member of the subject list or binds every member of the subject list to the object.
`true` if and only `$s` is a list and `o` is in that list.
`$o` can be calculated from `$s`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "member" ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
log:conclusion a fno:Function ;
    dcterms:comment """All possible conclusions which can be drawn from a formula.
`true` if and only if `$o` is the set of conclusions which can be drawn from `$s`, by successively applying any rules it contains to the data it contains.
Note: this is equivalent to cwm's "--think" command line function. It does use built-ins, so it may for example indirectly invoke other documents, validate signatures, etc.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "conclusion" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) .
log:conjunction a fno:Function ;
    dcterms:comment """A function to merge formulae: logical AND.
`true` if and only if `o`, which can be generated, is a formula containing a copy of each of the formulae `$s_1 .. $s_n`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "conjunction" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
log:content a fno:Function ;
    dcterms:comment """This connects a document and a string that represents it. (Cwm knows how to go get a document in order to evaluate this.)
Note: the content-type of the information is not given and so must be known or guessed.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "content" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:N3Document ] ) ] ) .
log:dtlit fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type rdfs:Literal ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
log:equalTo a fno:Function ;
    dcterms:comment """Determines if two RDF resources are the same.
`true` if and only if `$s` and `$o` are the same RDF node (symbol or literal).
Not to be confused with owl:sameAs.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "equalTo" .
log:includes a fno:Function ;
    dcterms:comment """The subject formula includes the object formula.
`true` if and only if `s` includes `$o` if there exists some substitution which when applied to `$o` creates a formula B' such that for every statement in B' is also in `$s`, every variable universally (or existentially) quantified in B' is quantified in the same way in `$s`. 
Variable substitution is applied recursively to nested compound terms such as formulae, lists and sets.
Note: you can use this to peer inside nested formulae.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "includes" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) .
log:notEqualTo a fno:Function ;
    dcterms:comment """Determines if two RDF resources are not the same.
`true` if and only if `$s` and `$o` are not the same RDF node (symbol or literal).""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "notEqualTo" .
log:notIncludes a fno:Function ;
    dcterms:comment """The object formula is NOT a subset of subject.
`true` if and only if `log:includes` is `false`. The converse of log:includes.
Related: see `log:includes`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "not includes" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) .
log:outputString a fno:Function ;
    dcterms:comment """The subject is a key and the object is a string,
where the strings are to be output in the order of the keys.
See cwm --strings in cwm --help.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "output string" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
log:parsedAsN3 a fno:Function ;
    dcterms:comment """The subject string, parsed as N3, gives this formula.
`true` if and only if `$s`, parsed as N3, gives `$o`.
`$s` should be a syntactically valid string in N3 format.
Related: see `log:n3String`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "parses to N3" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:N3 ] ) ] ) .
log:rawType a fno:Function ;
    dcterms:comment """Returns an identifier based on the type of the RDF Resource.
`true` if the type of `$s` is the same as `$o`, or binds the type to `$o`.
`$o` is unbound or one of `log:Formula`, `log:Literal`, `log:List`, `log:Set` or `log:Other`.
Example: `log:semanticsOrError` returns either a formula or a string, and you can check which using `log:rawType`. """ ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "rawType" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Type ] ) ] ) .
log:semantics a fno:Function ;
    dcterms:comment """The log:semantics of a document is the formula achieved by parsing representation of the document.
For a document in Notation3, `log:semantics` is the `log:parsedAsN3` of the `log:content` of the document.
For a document in another RDF syntax, it is parsed according to the appropriate specification to yield an RDF formula (a subclass of N3 `log:Formula`).
Evaluates to `false` if an unrecognized document format is retrieved.
Aside: Philosophers will be distracted here into worrying about the meaning of meaning. At least we didn't call this function "meaning"! 
In as much as N3 is used as an interlingua for interoperability for different systems, this for an N3 based system is the meaning expressed by a document.
Related: see `log:parsedAsN3` and `log:content`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "semantics" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:Formula ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:N3Document ] ) ] ) .
log:semanticsOrError a fno:Function ;
    dcterms:comment """This connects a document and either the formula it parses to, or an error message explaining what went wrong with trying.
Related: see `log:semantics`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "semantics or error message" ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:N3Document ] ) ] ) .
log:uri a fno:Function ;
    dcterms:comment """This allows one to look at the actual string of the URI which identifies this.
(Cwm can get the URI of a resource or get the resource from the URI.)
This is a level breaker, breaking the rule of not looking inside a
URI.   Use (eg with  string:match) to replace RDF's old "aboutEach"
functionality. Use to implement the URI spec and protocol specs, etc.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "uri" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
math:absoluteValue a fno:Function ;
    dcterms:comment "The object is calulated as the absolute value of the subject." ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "negation" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:cos a fno:Function ;
    dcterms:comment """The subject is an angle expressed in radians.
The object is calulated as the cosine value of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "cos" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:degrees a fno:Function ;
    dcterms:comment """The subject is an angle expressed in radians.
The object is calulated as the conversion in degrees of the value of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "degrees" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:difference a fno:Function ;
    dcterms:comment """The subject is a pair of numbers. The object
is calculated by subtracting the second number of the pair from the first.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "difference" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:TwoMemberedList ] ) ] ) .
math:exponentiation a fno:Function ;
    dcterms:comment """The subject is a pair of numbers. The object
is calculated by raising the first number of the power of the second.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "exponentiation" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:TwoMemberedList ] ) ] ) .
math:negation a fno:Function ;
    dcterms:comment "The subject or object is calculated to be the negation of the other." ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "negation" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:product a fno:Function ;
    dcterms:comment """The subject is a list of numbers.
The object is calculated as the arithmentic product of those numbers.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "product" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:List ] ) ] ) .
math:quotient a fno:Function ;
    dcterms:comment """The subject is a pair of numbers. The object
is calculated by dividing the first number of the pair by the second.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "quotient" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:TwoMemberedList ] ) ] ) .
math:remainder a fno:Function ;
    dcterms:comment """The subject is a pair of integers. The object
is calculated by dividing the first number of the pair by the second and taking the remainder.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "remainder" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:TwoMemberedList ] ) ] ) .
math:rounded a fno:Function ;
    dcterms:comment """The object is calulated as the number with no fractional part that is closest to the subject.
If there are two such numbers, then the one that is closest to positive infinity is returned.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "rounded" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:sin a fno:Function ;
    dcterms:comment """The subject is an angle expressed in radians.
The object is calulated as the sine value of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "sin" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:sinh a fno:Function ;
    dcterms:comment """The subject is an angle expressed in radians.
The object is calulated as the hyperbolic sine value of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "sinh" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:sum a fno:Function ;
    dcterms:comment """Performs addition of numbers. 
`true` if and only if the arithmetic sum of `$s_1, .. $s_n` equals `$o`.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "sum" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
math:tan a fno:Function ;
    dcterms:comment """The subject is an angle expressed in radians.
The object is calulated as the tangent value of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "tan" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
math:tanh a fno:Function ;
    dcterms:comment """The subject is an angle expressed in radians.
The object is calulated as the hyperbolic tangent value of the subject.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "tanh" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type math:Value ] ) ] ) .
string:contains a fno:Function ;
    dcterms:comment "True iff the subject string contains the object string." ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "contains" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:containsIgnoringCase a fno:Function ;
    dcterms:comment """True iff the subject string contains the object string,
with the comparison done ignoring the difference between upper case and
lower case characters.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "contains" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:endsWith a fno:Function ;
    dcterms:comment "True iff the subject string ends with the object string." ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "ends with" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:equalIgnoringCase a fno:Function ;
    dcterms:comment """True iff the subject string is the same as object string
ignoring differences between upper and lower case.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "contains" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:greaterThan a fno:Function ;
    dcterms:comment """True iff the string is greater than the object
when ordered according to Unicode(tm) code order.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "is greater than" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:lessThan a fno:Function ;
    dcterms:comment """True iff the string is less than the object
when ordered according to Unicode(tm) code order.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "is less than" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:matches a fno:Function ;
    dcterms:comment """The subject is a string;
the object is is a regular expression in the perl, python style.
It is true iff the string matches the regexp.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "contains" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:notEqualIgnoringCase a fno:Function ;
    dcterms:comment """True iff the subject string is the NOT same as object string
ignoring differences between upper and lower case.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "contains" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:notGreaterThan a fno:Function ;
    dcterms:comment """True iff the string is NOT greater than the object
when ordered according to Unicode(tm) code order.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "is not greater than" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:notLessThan a fno:Function ;
    dcterms:comment """True iff the string is NOT less than the object
when ordered according to Unicode(tm) code order.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "is not less than" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:notMatches a fno:Function ;
    dcterms:comment """The subject string;
the object is is a regular expression in the perl, python style.
It is true iff the string does NOT match the regexp.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "contains" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
string:replace a fno:Function ;
    dcterms:comment """A built-in for replacing characters or sub.
takes a list of 3 strings; the first is the
input data, the second the old and the third the new string.
The object is calculated as the replaced string.
For example, ("fofof bar", "of", "baz") string:replace "fbazbaz bar".""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "replace" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
string:scrape a fno:Function ;
    dcterms:comment """The subject is a list of two strings. The second string is
a regular expression in the perl, python style.
It must contain one group (a part in parentheses).  If the first string in the list matches
the regular expression, then the object is calculated as being the
part of the first string which matches the group.""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "scrape" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:List ] ) ] ) .
string:startsWith a fno:Function ;
    dcterms:comment "True iff the subject string starts with the object string." ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "starts with" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type log:String ] ) ] ) .
time:day a fno:Function ;
    dcterms:comment """
`true` if and only if $s is a `xsd:dateTime` and $o is the integer day component of the dateTime.
$o can be calculated as a function of $s.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "day" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type xsd:integer ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type xsd:dateTime ] ) ] ) .
time:month a fno:Function ;
    dcterms:comment """
`true` if and only if $s is a `xsd:dateTime` and $o is the integer month component of the dateTime.
$o can be calculated as a function of $s.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "month" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type xsd:integer ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type xsd:dateTime ] ) ] ) .
time:year a fno:Function ;
    dcterms:comment """
`true` if and only if $s is a `xsd:dateTime` and $o is the integer year component of the dateTime.
$o can be calculated as a function of $s.
""" ;
    fno:example ( [ a fno:Test ;
                dcterms:description """
                This is an example for a built-in function.
            """ ;
                rdfs:seeAlso <http://ppr.cs.dal.ca:3002/n3/editor/?formula=%40prefix%20%3A%20%3C%3A%3E%20.%0A%40prefix%20string%3A%20%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F10%2Fswap%2Fstring%23%3E%20.%0A%0A%3ALet%20%3Astring%20%22placeholder%22%20.%0A%0A%7B%20%3ALet%20%3Astring%20%3Fx%20.%20%7D%0A%3D%3E%0A%7B%20%3Aresult%20%3Ais%20%3Fx%20.%20%7D.%20> ;
                fno:expression """{
                @prefix : <:> .
                @prefix string: <http://www.w3.org/2000/10/swap/string#> .
                :Let :string "placeholder" .
                { :Let :string ?x . } => { :result :is ?x . } .
            }""" ;
                fno:result """
                <:result> <:is> "placeholder". 
            """ ] ) ;
    fno:name "year" ;
    fno:object ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Output ;
                            dcterms:description "" ;
                            fno:mode "*" ;
                            fno:predicate "$o.0" ;
                            fno:required true ;
                            fno:type xsd:integer ] ) ] ) ;
    fno:subject ( [ a rdf:Property ;
                fno:parameter ( [ a fno:Parameter ;
                            dcterms:description "" ;
                            fno:mode "+" ;
                            fno:predicate "$s" ;
                            fno:required true ;
                            fno:type xsd:dateTime ] ) ] ) .